<ui:composition xmlns="http://www.w3.org/1999/xhtml"
                xmlns:ui="http://java.sun.com/jsf/facelets"
                xmlns:h="http://java.sun.com/jsf/html"
                xmlns:f="http://java.sun.com/jsf/core"
                xmlns:p="http://primefaces.org/ui"
                template="/WEB-INF/template.xhtml">

    <ui:define name="title">
        Dialog Framework - <span class="subitem">Basic</span>
    </ui:define>

    <ui:define name="description">
        An external page can be displayed in a dynamically generated dialog on runtime.
    </ui:define>

    <ui:define name="implementation">
        
        <h:form>
            <p:commandButton value="View" icon="ui-icon-extlink" actionListener="#{dfView.viewCars}" />
            <p:commandButton value="Options" icon="ui-icon-extlink" actionListener="#{dfView.viewCarsCustomized}" />
        </h:form>
        
    </ui:define>

    <ui:define name="source">
        <p:tabView>
            <p:tab title="basic.xhtml">
                <pre name="code" class="brush:xml">
&lt;h:form&gt;
    &lt;p:commandButton value="View" icon="ui-icon-extlink" actionListener="\#{dfView.viewCars}" /&gt;
    &lt;p:commandButton value="Options" icon="ui-icon-extlink" actionListener="\#{dfView.viewCarsCustomized}" /&gt;
&lt;/h:form&gt;
                </pre>
            </p:tab>

            <p:tab title="DFView.java">
                <pre name="code" class="brush:java">
package org.primefaces.showcase.view.df;

import java.util.HashMap;
import java.util.Map;
import javax.faces.bean.ManagedBean;
import org.primefaces.context.RequestContext;

@ManagedBean(name = "dfView")
public class DFView {
    
    public void viewCars() {
        RequestContext.getCurrentInstance().openDialog("viewCars");
    }
    
    public void viewCarsCustomized() {
        Map&lt;String,Object&gt; options = new HashMap&lt;String, Object&gt;();
        options.put("modal", true);
        options.put("draggable", false);
        options.put("resizable", false);
        options.put("contentHeight", 320);
        
        RequestContext.getCurrentInstance().openDialog("viewCars", options, null);
    }
}
                </pre>
            </p:tab>
            
            <p:tab title="viewCars.xhtml">
                <pre name="code" class="brush:xml">
&lt;!DOCTYPE html&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml"
	xmlns:h="http://java.sun.com/jsf/html"
    xmlns:p="http://primefaces.org/ui"&gt;
    
    &lt;h:head&gt;
        &lt;title&gt;Cars&lt;/title&gt;
        &lt;style type="text/css"&gt;
            .ui-widget {
                font-size: 90%;
            }
        &lt;/style&gt;
    &lt;/h:head&gt;
    
    &lt;h:body&gt;
        &lt;p:dataTable var="car" value="\#{dfCarsView.cars}"&gt;
            &lt;p:column headerText="Id"&gt;
                &lt;h:outputText value="\#{car.id}" /&gt;
            &lt;/p:column&gt;

            &lt;p:column headerText="Year"&gt;
                &lt;h:outputText value="\#{car.year}" /&gt;
            &lt;/p:column&gt;

            &lt;p:column headerText="Brand"&gt;
                &lt;h:outputText value="\#{car.brand}" /&gt;
            &lt;/p:column&gt;

            &lt;p:column headerText="Color"&gt;
                &lt;h:outputText value="\#{car.color}" /&gt;
            &lt;/p:column&gt;
        &lt;/p:dataTable&gt;
    &lt;/h:body&gt;
    
&lt;/html&gt;
                </pre>
            </p:tab>
            
            <p:tab title="DFCarsView.java">
                <pre name="code" class="brush:java">
package org.primefaces.showcase.view.df;

import java.io.Serializable;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ManagedProperty;
import javax.faces.bean.ViewScoped;
import org.primefaces.context.RequestContext;
import org.primefaces.showcase.domain.Car;
import org.primefaces.showcase.service.CarService;

@ManagedBean(name = "dfCarsView")
@ViewScoped
public class DFCarsView implements Serializable {
    
    private List&lt;Car&gt; cars;

    @ManagedProperty("\#{carService}")
    private CarService service;
    
    @PostConstruct
    public void init() {
        cars = service.createCars(9);
    }
    
    public List&lt;Car&gt; getCars() {
        return cars;
    }

    public void setService(CarService service) {
        this.service = service;
    }
}
 
                </pre>
            </p:tab>
            
            <p:tab title="Documentation" titleStyleClass="tab-doc docslide-510" />
        </p:tabView>

    </ui:define>

</ui:composition>