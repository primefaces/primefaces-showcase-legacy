<ui:composition xmlns="http://www.w3.org/1999/xhtml"
                xmlns:ui="http://java.sun.com/jsf/facelets"
                xmlns:h="http://java.sun.com/jsf/html"
                xmlns:f="http://java.sun.com/jsf/core"
                xmlns:p="http://primefaces.org/ui"
                template="/WEB-INF/template.xhtml">

    <ui:define name="head">
        <style type="text/css">
            .label, .value {
                vertical-align: top
            }

            .output {
                font-weight: bold
            }
        </style>
	</ui:define>
    
    <ui:define name="title">
        SelectOneListbox
    </ui:define>

    <ui:define name="description">
        SelectOneListbox is used to choose a single item from a list.
    </ui:define>

    <ui:define name="implementation">
        
        <h:form>
            <h:panelGrid columns="2" style="margin-bottom:10px" cellpadding="5" columnClasses="label, value">
                <p:outputLabel for="basic" value="Basic:" />
                <p:selectOneListbox id="basic" value="#{selectOneView.option}">
                    <f:selectItem itemLabel="Option 1" itemValue="1" />
                    <f:selectItem itemLabel="Option 2" itemValue="2" />
                    <f:selectItem itemLabel="Option 3" itemValue="3" />
                </p:selectOneListbox>

                <p:outputLabel for="advanced" value="Advanced:" />
                <p:selectOneListbox id="advanced" value="#{selectOneView.theme}" converter="themeConverter" var="t" filter="true" filterMatchMode="contains">
                    <f:selectItems value="#{selectOneView.themes}" var="theme" itemLabel="#{theme.displayName}" itemValue="#{theme}" />

                    <p:column>
                        <h:outputText styleClass="ui-theme ui-theme-#{t.name}" />
                    </p:column>
                    
                    <p:column>
                        <h:outputText value="#{t.displayName}" />
                    </p:column>
                </p:selectOneListbox>
            </h:panelGrid>

            <p:separator />

            <p:commandButton value="Submit" update="display" oncomplete="PF('dlg').show()" icon="ui-icon-check" />

            <p:dialog header="Selected Values" modal="true" showEffect="fade" widgetVar="dlg" resizable="false">
                <p:panelGrid columns="2" id="display" columnClasses="label,output">
                    <h:outputText value="Basic:" />
                    <h:outputText value="#{selectOneView.option}" />

                    <h:outputText value="Advanced:" />
                    <h:outputText value="#{selectOneView.theme}" />
                </p:panelGrid>
            </p:dialog>
        </h:form>
        
    </ui:define>

    <ui:define name="source">
        <p:tabView>
            <p:tab title="listbox.xhtml">
                <pre name="code" class="brush:xml">
&lt;h:form&gt;
    &lt;h:panelGrid columns="2" style="margin-bottom:10px" cellpadding="5" columnClasses="label, value"&gt;
        &lt;p:outputLabel for="basic" value="Basic:" /&gt;
        &lt;p:selectOneListbox id="basic" value="\#{selectOneView.option}"&gt;
            &lt;f:selectItem itemLabel="Option 1" itemValue="1" /&gt;
            &lt;f:selectItem itemLabel="Option 2" itemValue="2" /&gt;
            &lt;f:selectItem itemLabel="Option 3" itemValue="3" /&gt;
        &lt;/p:selectOneListbox&gt;

        &lt;p:outputLabel for="advanced" value="Advanced:" /&gt;
        &lt;p:selectOneListbox id="advanced" value="\#{selectOneView.theme}" converter="themeConverter" var="t" filter="true" filterMatchMode="contains"&gt;
            &lt;f:selectItems value="\#{selectOneView.themes}" var="theme" itemLabel="\#{theme.displayName}" itemValue="\#{theme}" /&gt;

            &lt;p:column&gt;
                &lt;h:outputText styleClass="ui-theme ui-theme-\#{t.name}" /&gt;
            &lt;/p:column&gt;

            &lt;p:column&gt;
                &lt;h:outputText value="\#{t.displayName}" /&gt;
            &lt;/p:column&gt;
        &lt;/p:selectOneListbox&gt;
    &lt;/h:panelGrid&gt;

    &lt;p:separator /&gt;

    &lt;p:commandButton value="Submit" update="display" oncomplete="PF('dlg').show()" icon="ui-icon-check" /&gt;

    &lt;p:dialog header="Selected Values" modal="true" showEffect="fade" widgetVar="dlg" resizable="false"&gt;
        &lt;p:panelGrid columns="2" id="display" columnClasses="label,output"&gt;
            &lt;h:outputText value="Basic:" /&gt;
            &lt;h:outputText value="\#{selectOneView.option}" /&gt;

            &lt;h:outputText value="Advanced:" /&gt;
            &lt;h:outputText value="\#{selectOneView.theme}" /&gt;
        &lt;/p:panelGrid&gt;
    &lt;/p:dialog&gt;
&lt;/h:form&gt;
                </pre>
            </p:tab>

            <p:tab title="SelectOneView.java">
                <pre name="code" class="brush:java">
package org.primefaces.showcase.view.input;

import java.util.List;
import javax.annotation.PostConstruct;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ManagedProperty;

import org.primefaces.showcase.domain.Theme;
import org.primefaces.showcase.service.ThemeService;

@ManagedBean
public class SelectOneView {
    
    private String option;   
    private Theme theme; 
    private List&lt;Theme&gt; themes;
    
    @ManagedProperty("\#{themeService}")
    private ThemeService service;
    
    @PostConstruct
    public void init() {
        themes = service.getThemes();
    }

    public String getOption() {
        return option;
    }

    public void setOption(String option) {
        this.option = option;
    }

    public Theme getTheme() {
        return theme;
    }

    public void setTheme(Theme theme) {
        this.theme = theme;
    }

    public List&lt;Theme&gt; getThemes() {
        return themes;
    }

    public void setService(ThemeService service) {
        this.service = service;
    }
}


                </pre>
            </p:tab>
            
            <p:tab title="Theme.java">
                    <pre name="code" class="brush:java">
package org.primefaces.showcase.domain;

public class Theme {

    private int id;    
    private String displayName; 
    private String name;
    
    public Theme() {}

    public Theme(int id, String displayName, String name) {
        this.id = id;
        this.displayName = displayName;
        this.name = name;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getDisplayName() {
        return displayName;
    }

    public void setDisplayName(String displayName) {
        this.displayName = displayName;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
    
    @Override
    public String toString() {
        return name;
    }
}

                </pre>
            </p:tab>

            <p:tab title="ThemeService.java">
                <pre name="code" class="brush:java">
package org.primefaces.showcase.service;

import java.util.ArrayList;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.faces.bean.ApplicationScoped;
import javax.faces.bean.ManagedBean;

import org.primefaces.showcase.domain.Theme;

@ManagedBean(name="themeService", eager = true)
@ApplicationScoped
public class ThemeService {
    
    private List&lt;Theme&gt; themes;
    
    @PostConstruct
    public void init() {
        themes = new ArrayList&lt;Theme&gt;();
        themes.add(new Theme(0, "Afterdark", "afterdark"));
        themes.add(new Theme(1, "Afternoon", "afternoon"));
        themes.add(new Theme(2, "Afterwork", "afterwork"));
        themes.add(new Theme(3, "Aristo", "aristo"));
        themes.add(new Theme(4, "Black-Tie", "black-tie"));
        themes.add(new Theme(5, "Blitzer", "blitzer"));
        themes.add(new Theme(6, "Bluesky", "bluesky"));
        themes.add(new Theme(7, "Bootstrap", "bootstrap"));
        themes.add(new Theme(8, "Casablanca", "casablanca"));
        themes.add(new Theme(9, "Cupertino", "cupertino"));
        themes.add(new Theme(10, "Cruze", "cruze"));
        themes.add(new Theme(11, "Dark-Hive", "dark-hive"));
        themes.add(new Theme(12, "Delta", "delta"));
        themes.add(new Theme(13, "Dot-Luv", "dot-luv"));
        themes.add(new Theme(14, "Eggplant", "eggplant"));
        themes.add(new Theme(15, "Excite-Bike", "excite-bike"));
        themes.add(new Theme(16, "Flick", "flick"));
        themes.add(new Theme(17, "Glass-X", "glass-x"));
        themes.add(new Theme(18, "Home", "home"));
        themes.add(new Theme(19, "Hot-Sneaks", "hot-sneaks"));
        themes.add(new Theme(20, "Humanity", "humanity"));
        themes.add(new Theme(21, "Le-Frog", "le-frog"));
        themes.add(new Theme(22, "Midnight", "midnight"));
        themes.add(new Theme(23, "Mint-Choc", "mint-choc"));
        themes.add(new Theme(24, "Overcast", "overcast"));
        themes.add(new Theme(25, "Pepper-Grinder", "pepper-grinder"));
        themes.add(new Theme(26, "Redmond", "redmond"));
        themes.add(new Theme(27, "Rocket", "rocket"));
        themes.add(new Theme(28, "Sam", "sam"));
        themes.add(new Theme(29, "Smoothness", "smoothness"));
        themes.add(new Theme(30, "South-Street", "south-street"));
        themes.add(new Theme(31, "Start", "start"));
        themes.add(new Theme(32, "Sunny", "sunny"));
        themes.add(new Theme(33, "Swanky-Purse", "swanky-purse"));
        themes.add(new Theme(34, "Trontastic", "trontastic"));
        themes.add(new Theme(35, "UI-Darkness", "ui-darkness"));
        themes.add(new Theme(36, "UI-Lightness", "ui-lightness"));
        themes.add(new Theme(37, "Vader", "vader"));
    }
    
    public List&lt;Theme&gt; getThemes() {
        return themes;
    } 
}

                </pre>
            </p:tab>

            <p:tab title="ThemeConverter.java">
                <pre name="code" class="brush:java">
package org.primefaces.showcase.convert;

import javax.faces.component.UIComponent;
import javax.faces.context.FacesContext;
import javax.faces.convert.Converter;
import javax.faces.convert.FacesConverter;

import org.primefaces.showcase.domain.Theme;
import org.primefaces.showcase.service.ThemeService;

@FacesConverter("themeConverter")
public class ThemeConverter implements Converter {

    public Object getAsObject(FacesContext fc, UIComponent uic, String value) {
        if(value != null &amp;&amp; value.trim().length() &gt; 0) {
            try {
                ThemeService service = (ThemeService) fc.getExternalContext().getApplicationMap().get("themeService");
                return service.getThemes().get(Integer.parseInt(value));
            } catch(NumberFormatException e) {
                throw new ConverterException(new FacesMessage(FacesMessage.SEVERITY_ERROR, "Conversion Error", "Not a valid theme."));
            }
        }
        else {
            return null;
        }
    }

    public String getAsString(FacesContext fc, UIComponent uic, Object object) {
        if(object != null) {
            return String.valueOf(((Theme) object).getId());
        }
        else {
            return null;
        }
    }   
}
 
                </pre>
            </p:tab>  
            
            <p:tab title="Documentation" titleStyleClass="tab-doc docslide-418" />
        </p:tabView>

    </ui:define>

</ui:composition>