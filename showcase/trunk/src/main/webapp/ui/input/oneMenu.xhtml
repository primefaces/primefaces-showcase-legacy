<ui:composition xmlns="http://www.w3.org/1999/xhtml"
                xmlns:ui="http://java.sun.com/jsf/facelets"
                xmlns:h="http://java.sun.com/jsf/html"
                xmlns:f="http://java.sun.com/jsf/core"
                xmlns:p="http://primefaces.org/ui"
                template="/WEB-INF/template.xhtml">

    <ui:define name="head">
        <style type="text/css">
            .value {
                font-weight: bold;
            }
        </style>
	</ui:define>
    
    <ui:define name="title">
        SelectOneMenu
    </ui:define>

    <ui:define name="description">
        SelectOneMenu is used to choose a single item from a list.
    </ui:define>

    <ui:define name="implementation">
        
        <h:form>
            <p:messages autoUpdate="true" />

            <h:panelGrid columns="2" style="margin-bottom:10px" cellpadding="5">
                <p:outputLabel for="console" value="Basic:" />
                <p:selectOneMenu id="console" value="#{selectOneMenuView.console}">
                    <f:selectItem itemLabel="Select One" itemValue="" />
                    <f:selectItem itemLabel="Xbox One" itemValue="Xbox One" />
                    <f:selectItem itemLabel="PS4" itemValue="PS4" />
                    <f:selectItem itemLabel="Wii U" itemValue="Wii U" />
                </p:selectOneMenu>

                <p:outputLabel for="car" value="Grouping: " />
                <p:selectOneMenu id="car" value="#{selectOneMenuView.car}">
                    <f:selectItem itemLabel="Select One" itemValue="" />
                    <f:selectItems value="#{selectOneMenuView.cars}" />
                </p:selectOneMenu>

                <p:outputLabel for="city" value="Editable: " />
                <p:selectOneMenu id="city" value="#{selectOneMenuView.city}" effect="fold" editable="true">
                    <f:selectItem itemLabel="Select One" itemValue="" />
                    <f:selectItems value="#{selectOneMenuView.cities}" />
                </p:selectOneMenu>

                <p:outputLabel for="advanced" value="Advanced:" />
                <p:selectOneMenu id="advanced" value="#{selectOneMenuView.theme}" converter="themeConverter" panelStyle="width:180px"
                                 effect="fade" var="t" style="width:160px" filter="true" filterMatchMode="startsWith">
                    <f:selectItems value="#{selectOneMenuView.themes}" var="theme" itemLabel="#{theme.displayName}" itemValue="#{theme}" />

                    <p:column style="width:10%">
                        <h:outputText styleClass="ui-theme ui-theme-#{t.name}" />
                    </p:column>
                    
                    <p:column>
                        <h:outputText value="#{t.displayName}" />
                    </p:column>
                </p:selectOneMenu>
            </h:panelGrid>

            <p:commandButton value="Submit" update="display" oncomplete="PF('dlg').show()" icon="ui-icon-check" />

            <p:dialog header="Values" modal="true" showEffect="bounce" widgetVar="dlg" resizable="false">
                <p:panelGrid columns="2" id="display" columnClasses="label,value">
                    <h:outputText value="Basic:" />
                    <h:outputText value="#{selectOneMenuView.console}" />

                    <h:outputText value="Grouping:" />
                    <h:outputText value="#{selectOneMenuView.car}" />

                    <h:outputText value="Editable" />
                    <h:outputText value="#{selectOneMenuView.city}" />

                    <h:outputText value="Advanced:" />
                    <h:outputText value="#{selectOneMenuView.theme.displayName}" />
                </p:panelGrid>
            </p:dialog>
        </h:form>
        
    </ui:define>

    <ui:define name="source">
        <p:tabView>
            <p:tab title="oneMenu.xhtml">
                <pre name="code" class="brush:xml">
&lt;h:form&gt;
    &lt;p:messages autoUpdate="true" /&gt;

    &lt;h:panelGrid columns="2" style="margin-bottom:10px" cellpadding="5"&gt;
        &lt;p:outputLabel for="console" value="Basic:" /&gt;
        &lt;p:selectOneMenu id="console" value="\#{selectOneMenuView.console}"&gt;
            &lt;f:selectItem itemLabel="Select One" itemValue="" /&gt;
            &lt;f:selectItem itemLabel="Xbox One" itemValue="Xbox One" /&gt;
            &lt;f:selectItem itemLabel="PS4" itemValue="PS4" /&gt;
            &lt;f:selectItem itemLabel="Wii U" itemValue="Wii U" /&gt;
        &lt;/p:selectOneMenu&gt;

        &lt;p:outputLabel for="car" value="Grouping: " /&gt;
        &lt;p:selectOneMenu id="car" value="\#{selectOneMenuView.car}"&gt;
            &lt;f:selectItem itemLabel="Select One" itemValue="" /&gt;
            &lt;f:selectItems value="\#{selectOneMenuView.cars}" /&gt;
        &lt;/p:selectOneMenu&gt;

        &lt;p:outputLabel for="city" value="Editable: " /&gt;
        &lt;p:selectOneMenu id="city" value="\#{selectOneMenuView.city}" effect="fold" editable="true"&gt;
            &lt;f:selectItem itemLabel="Select One" itemValue="" /&gt;
            &lt;f:selectItems value="\#{selectOneMenuView.cities}" /&gt;
        &lt;/p:selectOneMenu&gt;

        &lt;p:outputLabel for="advanced" value="Advanced:"  /&gt;
        &lt;p:selectOneMenu id="advanced" value="\#{selectOneMenuView.theme}" converter="themeConverter" panelStyle="width:180px"
                         effect="fade" var="t" style="width:160px" filter="true" filterMatchMode="startsWith"&gt;
            &lt;f:selectItems value="\#{selectOneMenuView.themes}" var="theme" itemLabel="\#{theme.displayName}" itemValue="\#{theme}" /&gt;

            &lt;p:column style="width:10%"&gt;
                &lt;h:outputText styleClass="ui-theme ui-theme-\#{t.name}" /&gt;
            &lt;/p:column&gt;

            &lt;p:column&gt;
                &lt;h:outputText value="\#{t.displayName}" /&gt;
            &lt;/p:column&gt;
        &lt;/p:selectOneMenu&gt;
    &lt;/h:panelGrid&gt;

    &lt;p:commandButton value="Submit" update="display" oncomplete="PF('dlg').show()" icon="ui-icon-check" /&gt;

    &lt;p:dialog header="Values" modal="true" showEffect="bounce" widgetVar="dlg" resizable="false"&gt;
        &lt;p:panelGrid columns="2" id="display" columnClasses="label,value"&gt;
            &lt;h:outputText value="Basic:" /&gt;
            &lt;h:outputText value="\#{selectOneMenuView.console}" /&gt;

            &lt;h:outputText value="Grouping:" /&gt;
            &lt;h:outputText value="\#{selectOneMenuView.car}" /&gt;

            &lt;h:outputText value="Editable" /&gt;
            &lt;h:outputText value="\#{selectOneMenuView.city}" /&gt;

            &lt;h:outputText value="Advanced:" /&gt;
            &lt;h:outputText value="\#{selectOneMenuView.theme.displayName}" /&gt;
        &lt;/p:panelGrid&gt;
    &lt;/p:dialog&gt;
&lt;/h:form&gt;
                </pre>
            </p:tab>

            <p:tab title="SelectOneMenuView.java">
                <pre name="code" class="brush:java">
package org.primefaces.showcase.view.input;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.annotation.PostConstruct;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ManagedProperty;
import javax.faces.model.SelectItem;
import javax.faces.model.SelectItemGroup;

import org.primefaces.showcase.domain.Theme;
import org.primefaces.showcase.service.ThemeService;

@ManagedBean
public class SelectOneMenuView {
    
    private String console;
  
    private String car;  
    private List&lt;SelectItem&gt; cars;

    private String city;  
    private Map&lt;String,String&gt; cities = new HashMap&lt;String, String&gt;();
 
    private Theme theme;   
    private List&lt;Theme&gt; themes;
    
    @ManagedProperty("\#{themeService}")
    private ThemeService service;
    
    @PostConstruct
    public void init() {
        //cars
        SelectItemGroup g1 = new SelectItemGroup("German Cars");
        g1.setSelectItems(new SelectItem[] {new SelectItem("BMW", "BMW"), new SelectItem("Mercedes", "Mercedes"), new SelectItem("Volkswagen", "Volkswagen")});
        
        SelectItemGroup g2 = new SelectItemGroup("American Cars");
        g2.setSelectItems(new SelectItem[] {new SelectItem("Chrysler", "Chrysler"), new SelectItem("GM", "GM"), new SelectItem("Ford", "Ford")});
        
        cars = new ArrayList&lt;SelectItem&gt;();
        cars.add(g1);
        cars.add(g2);
        
        //cities
        cities = new HashMap&lt;String, String&gt;();
        cities.put("New York", "New York");
        cities.put("London","London");
        cities.put("Paris","Paris");
        cities.put("Barcelona","Barcelona");
        cities.put("Istanbul","Istanbul");
        cities.put("Berlin","Berlin");
        
        //themes
        themes = service.getThemes();
    }

    public String getConsole() {
        return console;
    }

    public void setConsole(String console) {
        this.console = console;
    }

    public String getCar() {
        return car;
    }

    public void setCar(String car) {
        this.car = car;
    }

    public String getCity() {
        return city;
    }

    public void setCity(String city) {
        this.city = city;
    }

    public Theme getTheme() {
        return theme;
    }

    public void setTheme(Theme theme) {
        this.theme = theme;
    }
    
    public List&lt;SelectItem&gt; getCars() {
        return cars;
    }

    public Map&lt;String, String&gt; getCities() {
        return cities;
    }

    public List&lt;Theme&gt; getThemes() {
        return themes;
    }
    
    public void setService(ThemeService service) {
        this.service = service;
    }    
}

                </pre>
            </p:tab>
            
            <p:tab title="Theme.java">
                    <pre name="code" class="brush:java">
package org.primefaces.showcase.domain;

public class Theme {

    private int id;    
    private String displayName; 
    private String name;
    
    public Theme() {}

    public Theme(int id, String displayName, String name) {
        this.id = id;
        this.displayName = displayName;
        this.name = name;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getDisplayName() {
        return displayName;
    }

    public void setDisplayName(String displayName) {
        this.displayName = displayName;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
    
    @Override
    public String toString() {
        return name;
    }
}

                </pre>
            </p:tab>

            <p:tab title="ThemeService.java">
                <pre name="code" class="brush:java">
package org.primefaces.showcase.service;

import java.util.ArrayList;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.faces.bean.ApplicationScoped;
import javax.faces.bean.ManagedBean;

import org.primefaces.showcase.domain.Theme;

@ManagedBean(name="themeService", eager = true)
@ApplicationScoped
public class ThemeService {
    
    private List&lt;Theme&gt; themes;
    
    @PostConstruct
    public void init() {
        themes = new ArrayList&lt;Theme&gt;();
        themes.add(new Theme(0, "Afterdark", "afterdark"));
        themes.add(new Theme(1, "Afternoon", "afternoon"));
        themes.add(new Theme(2, "Afterwork", "afterwork"));
        themes.add(new Theme(3, "Aristo", "aristo"));
        themes.add(new Theme(4, "Black-Tie", "black-tie"));
        themes.add(new Theme(5, "Blitzer", "blitzer"));
        themes.add(new Theme(6, "Bluesky", "bluesky"));
        themes.add(new Theme(7, "Bootstrap", "bootstrap"));
        themes.add(new Theme(8, "Casablanca", "casablanca"));
        themes.add(new Theme(9, "Cupertino", "cupertino"));
        themes.add(new Theme(10, "Cruze", "cruze"));
        themes.add(new Theme(11, "Dark-Hive", "dark-hive"));
        themes.add(new Theme(12, "Delta", "delta"));
        themes.add(new Theme(13, "Dot-Luv", "dot-luv"));
        themes.add(new Theme(14, "Eggplant", "eggplant"));
        themes.add(new Theme(15, "Excite-Bike", "excite-bike"));
        themes.add(new Theme(16, "Flick", "flick"));
        themes.add(new Theme(17, "Glass-X", "glass-x"));
        themes.add(new Theme(18, "Home", "home"));
        themes.add(new Theme(19, "Hot-Sneaks", "hot-sneaks"));
        themes.add(new Theme(20, "Humanity", "humanity"));
        themes.add(new Theme(21, "Le-Frog", "le-frog"));
        themes.add(new Theme(22, "MetroUI", "metroui"));
        themes.add(new Theme(23, "Midnight", "midnight"));
        themes.add(new Theme(24, "Mint-Choc", "mint-choc"));
        themes.add(new Theme(25, "Overcast", "overcast"));
        themes.add(new Theme(26, "Pepper-Grinder", "pepper-grinder"));
        themes.add(new Theme(27, "Redmond", "redmond"));
        themes.add(new Theme(28, "Rocket", "rocket"));
        themes.add(new Theme(29, "Sam", "sam"));
        themes.add(new Theme(30, "Smoothness", "smoothness"));
        themes.add(new Theme(31, "South-Street", "south-street"));
        themes.add(new Theme(32, "Start", "start"));
        themes.add(new Theme(33, "Sunny", "sunny"));
        themes.add(new Theme(34, "Swanky-Purse", "swanky-purse"));
        themes.add(new Theme(35, "Trontastic", "trontastic"));
        themes.add(new Theme(36, "UI-Darkness", "ui-darkness"));
        themes.add(new Theme(37, "UI-Lightness", "ui-lightness"));
        themes.add(new Theme(38, "Vader", "vader"));
    }
    
    public List&lt;Theme&gt; getThemes() {
        return themes;
    } 
}


                </pre>
            </p:tab>

            <p:tab title="ThemeConverter.java">
                <pre name="code" class="brush:java">
package org.primefaces.showcase.convert;

import javax.faces.component.UIComponent;
import javax.faces.context.FacesContext;
import javax.faces.convert.Converter;
import javax.faces.convert.FacesConverter;

import org.primefaces.showcase.domain.Theme;
import org.primefaces.showcase.service.ThemeService;

@FacesConverter("themeConverter")
public class ThemeConverter implements Converter {

    public Object getAsObject(FacesContext fc, UIComponent uic, String value) {
        if(value != null &amp;&amp; value.trim().length() &gt; 0) {
            try {
                ThemeService service = (ThemeService) fc.getExternalContext().getApplicationMap().get("themeService");
                return service.getThemes().get(Integer.parseInt(value));
            } catch(NumberFormatException e) {
                throw new ConverterException(new FacesMessage(FacesMessage.SEVERITY_ERROR, "Conversion Error", "Not a valid theme."));
            }
        }
        else {
            return null;
        }
    }

    public String getAsString(FacesContext fc, UIComponent uic, Object object) {
        if(object != null) {
            return String.valueOf(((Theme) object).getId());
        }
        else {
            return null;
        }
    }   
}         
           
                </pre>
            </p:tab>

            <p:tab title="Documentation" titleStyleClass="tab-doc docslide-421" />
        </p:tabView>

    </ui:define>

</ui:composition>