<ui:composition xmlns="http://www.w3.org/1999/xhtml"
                xmlns:ui="http://java.sun.com/jsf/facelets"
                xmlns:h="http://java.sun.com/jsf/html"
                xmlns:f="http://java.sun.com/jsf/core"
                xmlns:p="http://primefaces.org/ui"
                template="/WEB-INF/template.xhtml">

    <ui:define name="head">
		<script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=false"></script>
		<script type="text/javascript">
			var currentMarker = null;
			
			function handlePointClick(event) {
				if(currentMarker === null) {
					document.getElementById('lat').value = event.latLng.lat();
					document.getElementById('lng').value = event.latLng.lng();

					currentMarker = new google.maps.Marker({
						position:new google.maps.LatLng(event.latLng.lat(), event.latLng.lng())
					});
									
					PF('map').addOverlay(currentMarker);

					PF('dlg').show();
				}	
			}

			function markerAddComplete() {
				var title = document.getElementById('title');
				currentMarker.setTitle(title.value);
				title.value = "";

				currentMarker = null;
				PF('dlg').hide();
			}

			function cancel() {
				PF('dlg').hide();
				currentMarker.setMap(null);
				currentMarker = null;

				return false;
			}
		</script>
	</ui:define>
    
    <ui:define name="title">
        GMap - <span class="subitem">Adding Markers</span>
    </ui:define>

    <ui:define name="description">
        This examples demonstrates how to add a marker and keep client side representation in sync with the server side model. Even though you use Google Maps as a JSF component you can still take advantage of the full Google Maps API.
    </ui:define>

    <ui:define name="implementation">

        <p:growl id="messages" showDetail="true" />

        <p:gmap id="gmap" center="36.890257,30.707417" zoom="13" type="HYBRID" style="width:600px;height:400px"
            model="#{addMarkersView.emptyModel}" onPointClick="handlePointClick(event);" widgetVar="map" />

        <p:dialog widgetVar="dlg" showEffect="fade">
            <h:form prependId="false">
                <h:panelGrid columns="2">
                    <h:outputLabel for="title" value="Title:" />
                    <p:inputText id="title" value="#{addMarkersView.title}" />

                    <f:facet name="footer">
                        <p:commandButton value="Add" actionListener="#{addMarkersView.addMarker}" update=":messages" oncomplete="markerAddComplete()" />
                        <p:commandButton value="Cancel" onclick="return cancel()" />
                    </f:facet>
                </h:panelGrid>

                <h:inputHidden id="lat" value="#{addMarkersView.lat}" />
                <h:inputHidden id="lng" value="#{addMarkersView.lng}" />
            </h:form>
        </p:dialog>
        
    </ui:define>

    <ui:define name="source">
        <p:tabView>
            <p:tab title="addMarkers.xhtml">
                <pre name="code" class="brush:xml">
&lt;p:growl id="messages" showDetail="true" /&gt;

&lt;p:gmap id="gmap" center="36.890257,30.707417" zoom="13" type="HYBRID" style="width:600px;height:400px"
    model="\#{addMarkersView.emptyModel}" onPointClick="handlePointClick(event);" widgetVar="map" /&gt;

&lt;p:dialog widgetVar="dlg" showEffect="fade"&gt;
    &lt;h:form prependId="false"&gt;
        &lt;h:panelGrid columns="2"&gt;
            &lt;h:outputLabel for="title" value="Title:" /&gt;
            &lt;p:inputText id="title" value="\#{addMarkersView.title}" /&gt;

            &lt;f:facet name="footer"&gt;
                &lt;p:commandButton value="Add" actionListener="\#{addMarkersView.addMarker}" update=":messages" oncomplete="markerAddComplete()" /&gt;
                &lt;p:commandButton value="Cancel" onclick="return cancel()" /&gt;
            &lt;/f:facet&gt;
        &lt;/h:panelGrid&gt;

        &lt;h:inputHidden id="lat" value="\#{addMarkersView.lat}" /&gt;
        &lt;h:inputHidden id="lng" value="\#{addMarkersView.lng}" /&gt;
    &lt;/h:form&gt;
&lt;/p:dialog&gt;

&lt;script type="text/javascript"&gt;
    var currentMarker = null;

    function handlePointClick(event) {
        if(currentMarker === null) {
            document.getElementById('lat').value = event.latLng.lat();
            document.getElementById('lng').value = event.latLng.lng();

            currentMarker = new google.maps.Marker({
                position:new google.maps.LatLng(event.latLng.lat(), event.latLng.lng())
            });

            PF('map').addOverlay(currentMarker);

            PF('dlg').show();
        }	
    }

    function markerAddComplete() {
        var title = document.getElementById('title');
        currentMarker.setTitle(title.value);
        title.value = "";

        currentMarker = null;
        PF('dlg').hide();
    }

    function cancel() {
        PF('dlg').hide();
        currentMarker.setMap(null);
        currentMarker = null;

        return false;
    }
&lt;/script&gt;
                </pre>
            </p:tab>

            <p:tab title="AddMarkersView.java">
                <pre name="code" class="brush:java">
package org.primefaces.showcase.view.data.gmap;

import java.io.Serializable;
import javax.annotation.PostConstruct;
 
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.context.FacesContext;
 
import org.primefaces.model.map.DefaultMapModel;
import org.primefaces.model.map.LatLng;
import org.primefaces.model.map.MapModel;
import org.primefaces.model.map.Marker;

@ManagedBean
public class AddMarkersView implements Serializable {
    
    private MapModel emptyModel;
     
    private String title;
     
    private double lat;
     
    private double lng;
 
    @PostConstruct
    public void init() {
        emptyModel = new DefaultMapModel();
    }
     
    public MapModel getEmptyModel() {
        return emptyModel;
    }
     
    public String getTitle() {
        return title;
    }
 
    public void setTitle(String title) {
        this.title = title;
    }
 
    public double getLat() {
        return lat;
    }
 
    public void setLat(double lat) {
        this.lat = lat;
    }
 
    public double getLng() {
        return lng;
    }
 
    public void setLng(double lng) {
        this.lng = lng;
    }
     
    public void addMarker() {
        Marker marker = new Marker(new LatLng(lat, lng), title);
        emptyModel.addOverlay(marker);
         
        FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Marker Added", "Lat:" + lat + ", Lng:" + lng));
    }
}

                </pre>
            </p:tab>
        </p:tabView>

    </ui:define>

</ui:composition>
