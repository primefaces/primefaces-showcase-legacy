<ui:composition xmlns="http://www.w3.org/1999/xhtml"
                xmlns:ui="http://java.sun.com/jsf/facelets"
                xmlns:h="http://java.sun.com/jsf/html"
                xmlns:f="http://java.sun.com/jsf/core"
                xmlns:p="http://primefaces.org/ui"
                template="./template.xhtml">

    <ui:define name="title">
        DataTable - <span class="subitem">Dynamic Columns</span>
    </ui:define>

    <ui:define name="description">
        Columns of datatable can be created dynamically using the p:columns component.
    </ui:define>

    <ui:define name="implementation">

        Available columns are "id","brand","year","color" and "price".
        
        <h:form id="form">    
            <h:panelGrid columns="3" style="margin:10px 0">
                <p:outputLabel for="template" value="Template:" style="font-weight:bold"/>
                <p:inputText id="template" value="#{dtColumnsView.columnTemplate}" size="50"/>
                <p:commandButton update="cars" actionListener="#{dtColumnsView.updateColumns}" value="Update" process="@parent" icon="ui-icon-refresh" oncomplete="PF('carsTable').clearFilters()"/>
            </h:panelGrid>

            <p:dataTable id="cars" var="car" value="#{dtColumnsView.cars}" widgetVar="carsTable" filteredValue="#{dtColumnsView.filteredCars}">                    
                <p:columns value="#{dtColumnsView.columns}" var="column" columnIndexVar="colIndex" sortBy="#{car[column.property]}" filterBy="#{car[column.property]}">
                    <f:facet name="header">
                        <h:outputText value="#{column.header}" />
                    </f:facet>
                    <h:outputText value="#{car[column.property]}" />
                </p:columns>
            </p:dataTable>
        </h:form>
        
    </ui:define>

    <ui:define name="source">
        <p:tabView>
            <p:tab title="columns.xhtml">
                <pre name="code" class="brush:xml">
&lt;h:form id="form"&gt;    
    &lt;h:panelGrid columns="3" style="margin:10px 0"&gt;
        &lt;p:outputLabel for="template" value="Template:" style="font-weight:bold"/&gt;
        &lt;p:inputText id="template" value="\#{dtColumnsView.columnTemplate}" size="50"/&gt;
        &lt;p:commandButton update="cars" actionListener="\#{dtColumnsView.updateColumns}" value="Update" process="@parent" icon="ui-icon-refresh" oncomplete="PF('carsTable').clearFilters()"/&gt;
    &lt;/h:panelGrid&gt;

    &lt;p:dataTable id="cars" var="car" value="\#{dtColumnsView.cars}" widgetVar="carsTable" filteredValue="\#{dtColumnsView.filteredCars}"&gt;                    
        &lt;p:columns value="\#{dtColumnsView.columns}" var="column" columnIndexVar="colIndex" sortBy="\#{car[column.property]}" filterBy="\#{car[column.property]}"&gt;
            &lt;f:facet name="header"&gt;
                &lt;h:outputText value="\#{column.header}" /&gt;
            &lt;/f:facet&gt;
            &lt;h:outputText value="\#{car[column.property]}" /&gt;
        &lt;/p:columns&gt;
    &lt;/p:dataTable&gt;
&lt;/h:form&gt;
                </pre>
            </p:tab>

            <p:tab title="ColumnsView.java">
                <pre name="code" class="brush:java">
package org.primefaces.showcase.view.data.datatable;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ManagedProperty;
import javax.faces.bean.ViewScoped;
import javax.faces.component.UIComponent;
import javax.faces.context.FacesContext;
import org.primefaces.showcase.domain.Car;
import org.primefaces.showcase.service.CarService;

@ManagedBean(name="dtColumnsView")
@ViewScoped
public class ColumnsView implements Serializable {
    
    private final static List&lt;String&gt; VALID_COLUMN_KEYS = Arrays.asList("id", "brand", "year", "color", "price");
	
    private String columnTemplate = "id brand year";
    
    private List&lt;ColumnModel&gt; columns;
    
    private List&lt;Car&gt; cars;
    
    private List&lt;Car&gt; filteredCars;
    
    @ManagedProperty("\#{carService}")
    private CarService service;

    @PostConstruct
    public void init() {
        cars = service.createCars(10);
        
        createDynamicColumns();
    }
    
    public List&lt;Car&gt; getCars() {
        return cars;
    }

    public List&lt;Car&gt; getFilteredCars() {
        return filteredCars;
    }

    public void setFilteredCars(List&lt;Car&gt; filteredCars) {
        this.filteredCars = filteredCars;
    }

    public void setService(CarService service) {
        this.service = service;
    }

    public String getColumnTemplate() {
        return columnTemplate;
    }

    public void setColumnTemplate(String columnTemplate) {
        this.columnTemplate = columnTemplate;
    }

    public List&lt;ColumnModel&gt; getColumns() {
        return columns;
    }

    private void createDynamicColumns() {
        String[] columnKeys = columnTemplate.split(" ");
        columns = new ArrayList&lt;ColumnModel&gt;();   
        
        for(String columnKey : columnKeys) {
            String key = columnKey.trim();
            
            if(VALID_COLUMN_KEYS.contains(key)) {
                columns.add(new ColumnModel(columnKey.toUpperCase(), columnKey));
            }
        }
    }
    
    public void updateColumns() {
        //reset table state
        UIComponent table = FacesContext.getCurrentInstance().getViewRoot().findComponent(":form:cars");
        table.setValueExpression("sortBy", null);
        
        //update columns
        createDynamicColumns();
    }
    
    static public class ColumnModel implements Serializable {

        private String header;
        private String property;

        public ColumnModel(String header, String property) {
            this.header = header;
            this.property = property;
        }

        public String getHeader() {
            return header;
        }

        public String getProperty() {
            return property;
        }
    }
}
                </pre>
            </p:tab>
            
            <p:tab title="CarService.java">
                <pre name="code" class="brush:java">
package org.primefaces.showcase.service;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import javax.faces.bean.ApplicationScoped;
import javax.faces.bean.ManagedBean;
import org.primefaces.showcase.domain.Car;

@ManagedBean(name = "carService")
@ApplicationScoped
public class CarService {
    
    private final static String[] colors;
	
	private final static String[] brands;
    
    static {
		colors = new String[10];
		colors[0] = "Black";
		colors[1] = "White";
		colors[2] = "Green";
		colors[3] = "Red";
		colors[4] = "Blue";
		colors[5] = "Orange";
		colors[6] = "Silver";
		colors[7] = "Yellow";
		colors[8] = "Brown";
		colors[9] = "Maroon";
		
		brands = new String[10];
		brands[0] = "BMW";
		brands[1] = "Mercedes";
		brands[2] = "Volvo";
		brands[3] = "Audi";
		brands[4] = "Renault";
		brands[5] = "Fiat";
		brands[6] = "Volkswagen";
		brands[7] = "Honda";
		brands[8] = "Jaguar";
		brands[9] = "Ford";
	}
    
    public List&lt;Car&gt; createCars(int size) {
        List&lt;Car&gt; list = new ArrayList&lt;Car&gt;();
		for(int i = 0 ; i &lt; size ; i++) {
			list.add(new Car(getRandomId(), getRandomBrand(), getRandomYear(), getRandomColor(), getRandomPrice(), getRandomSoldState()));
        }
        
        return list;
    }
    
    private String getRandomId() {
		return UUID.randomUUID().toString().substring(0, 8);
	}
    
    private int getRandomYear() {
		return (int) (Math.random() * 50 + 1960);
	}
	
	private String getRandomColor() {
		return colors[(int) (Math.random() * 10)];
	}
	
	private String getRandomBrand() {
		return brands[(int) (Math.random() * 10)];
	}
    
    public int getRandomPrice() {
		return (int) (Math.random() * 100000);
	}
    
    public boolean getRandomSoldState() {
		return (Math.random() &gt; 0.5) ? true: false;
	}

    public List&lt;String&gt; getColors() {
        return Arrays.asList(colors);
    }
    
    public List&lt;String&gt; getBrands() {
        return Arrays.asList(brands);
    }
}
                </pre>
            </p:tab>
            
            <p:tab title="Documentation" titleStyleClass="tab-doc docslide-149" />
        </p:tabView>

    </ui:define>

</ui:composition>