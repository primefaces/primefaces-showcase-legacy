<ui:composition xmlns="http://www.w3.org/1999/xhtml"
                xmlns:ui="http://java.sun.com/jsf/facelets"
                xmlns:h="http://java.sun.com/jsf/html"
                xmlns:f="http://java.sun.com/jsf/core"
                xmlns:p="http://primefaces.org/ui"
                template="./template.xhtml">

    <ui:define name="head">
        <style type="text/css">
            .ui-datatable .ui-datatable-header {
                text-align: right !important;
            }
            
            .year-spinner input {
                width: 100px
            }
            
            .ui-button-text-only .ui-button-text {
                padding: 0.3em 0.4em;
            }
            
            .ui-selectcheckboxmenu-panel .ui-selectcheckboxmenu-header .ui-chkbox {
                display: none;
            }
        </style>
    </ui:define>
    
    <ui:define name="title">
        DataTable - <span class="subitem">Filter</span>
    </ui:define>

    <ui:define name="description">
        Filtering updates the data based on the constraints.
    </ui:define>

    <ui:define name="implementation">
        
        <h:form>
            <p:dataTable var="car" value="#{dtFilterView.cars}" widgetVar="carsTable"
                         emptyMessage="No cars found with given criteria" filteredValue="#{dtFilterView.filteredCars}">

                <f:facet name="header">
                    <p:outputPanel>
                        <h:outputText value="Search all fields:" />
                        <p:inputText id="globalFilter" onkeyup="PF('carsTable').filter()" style="width:150px" placeholder="Enter keyword"/>
                    </p:outputPanel>
                </f:facet>

                <p:column filterBy="#{car.id}" headerText="Id" footerText="contains" filterMatchMode="contains">
                    <h:outputText value="#{car.id}" />
                </p:column>

                <p:column filterBy="#{car.year}" headerText="Year" footerText="lte" filterMatchMode="lte">
                    <f:facet name="filter">
                        <p:spinner onchange="PF('carsTable').filter()" styleClass="year-spinner">
                            <f:converter converterId="javax.faces.Integer" />
                        </p:spinner>
                    </f:facet>
                    <h:outputText value="#{car.year}" />
                </p:column>

                <p:column filterBy="#{car.brand}" headerText="Brand" footerText="exact" filterMatchMode="exact">
                    <f:facet name="filter">
                        <p:selectOneMenu onchange="PF('carsTable').filter()" >
                            <f:selectItem itemLabel="Select One" itemValue="#{null}" noSelectionOption="true" />
                            <f:selectItems value="#{dtFilterView.brands}" />
                        </p:selectOneMenu>
                    </f:facet>
                    <h:outputText value="#{car.brand}" />
                </p:column>

                <p:column filterBy="#{car.color}" headerText="Color" footerText="in" filterMatchMode="in">
                    <f:facet name="filter">
                        <p:selectCheckboxMenu label="Colors" onchange="PF('carsTable').filter()" panelStyle="width:125px" scrollHeight="150">
                            <f:selectItems value="#{dtFilterView.colors}" />
                        </p:selectCheckboxMenu>
                    </f:facet>
                    <h:outputText value="#{car.color}" />
                </p:column>

                <p:column filterBy="#{car.sold}" headerText="Status" footerText="equals" filterMatchMode="equals">
                    <f:facet name="filter">
                        <p:selectOneButton onchange="PF('carsTable').filter()">
                            <f:converter converterId="javax.faces.Boolean" />
                            <f:selectItem itemLabel="All" itemValue="" />
                            <f:selectItem itemLabel="Sold" itemValue="true" />
                            <f:selectItem itemLabel="Sale" itemValue="false" />
                        </p:selectOneButton>
                    </f:facet>
                    <h:outputText value="#{car.sold ? 'Sold': 'Sale'}" />
                </p:column>

                <p:column filterBy="#{car.price}" headerText="Price" footerText="custom (min)" filterFunction="#{dtFilterView.filterByPrice}">
                    <h:outputText value="#{car.price}">
                        <f:convertNumber currencySymbol="$" type="currency"/>
                    </h:outputText>
                </p:column>
            </p:dataTable>
        </h:form>
        
    </ui:define>

    <ui:define name="source">
        <p:tabView>
            <p:tab title="filter.xhtml">
                <pre name="code" class="brush:xml">
&lt;h:form&gt;
    &lt;p:dataTable var="car" value="\#{dtFilterView.cars}" widgetVar="carsTable"
                 emptyMessage="No cars found with given criteria" filteredValue="\#{dtFilterView.filteredCars}"&gt;

        &lt;f:facet name="header"&gt;
            &lt;p:outputPanel&gt;
                &lt;h:outputText value="Search all fields:" /&gt;
                &lt;p:inputText id="globalFilter" onkeyup="PF('carsTable').filter()" style="width:150px" placeholder="Enter keyword"/&gt;
            &lt;/p:outputPanel&gt;
        &lt;/f:facet&gt;

        &lt;p:column filterBy="\#{car.id}" headerText="Id" footerText="contains" filterMatchMode="contains"&gt;
            &lt;h:outputText value="\#{car.id}" /&gt;
        &lt;/p:column&gt;

        &lt;p:column filterBy="\#{car.year}" headerText="Year" footerText="lte" filterMatchMode="lte"&gt;
            &lt;f:facet name="filter"&gt;
                &lt;p:spinner onchange="PF('carsTable').filter()" styleClass="year-spinner"&gt;
                    &lt;f:converter converterId="javax.faces.Integer" /&gt;
                &lt;/p:spinner&gt;
            &lt;/f:facet&gt;
            &lt;h:outputText value="\#{car.year}" /&gt;
        &lt;/p:column&gt;

        &lt;p:column filterBy="\#{car.brand}" headerText="Brand" footerText="exact" filterMatchMode="exact"&gt;
            &lt;f:facet name="filter"&gt;
                &lt;p:selectOneMenu onchange="PF('carsTable').filter()" &gt;
                    &lt;f:selectItem itemLabel="Select One" itemValue="\#{null}" noSelectionOption="true" /&gt;
                    &lt;f:selectItems value="\#{dtFilterView.brands}" /&gt;
                &lt;/p:selectOneMenu&gt;
            &lt;/f:facet&gt;
            &lt;h:outputText value="\#{car.brand}" /&gt;
        &lt;/p:column&gt;

        &lt;p:column filterBy="\#{car.color}" headerText="Color" footerText="in" filterMatchMode="in"&gt;
            &lt;f:facet name="filter"&gt;
                &lt;p:selectCheckboxMenu label="Colors" onchange="PF('carsTable').filter()" panelStyle="width:125px" scrollHeight="150"&gt;
                    &lt;f:selectItems value="\#{dtFilterView.colors}" /&gt;
                &lt;/p:selectCheckboxMenu&gt;
            &lt;/f:facet&gt;
            &lt;h:outputText value="\#{car.color}" /&gt;
        &lt;/p:column&gt;

        &lt;p:column filterBy="\#{car.sold}" headerText="Status" footerText="equals" filterMatchMode="equals"&gt;
            &lt;f:facet name="filter"&gt;
                &lt;p:selectOneButton onchange="PF('carsTable').filter()"&gt;
                    &lt;f:converter converterId="javax.faces.Boolean" /&gt;
                    &lt;f:selectItem itemLabel="All" itemValue="" /&gt;
                    &lt;f:selectItem itemLabel="Sold" itemValue="true" /&gt;
                    &lt;f:selectItem itemLabel="Sale" itemValue="false" /&gt;
                &lt;/p:selectOneButton&gt;
            &lt;/f:facet&gt;
            &lt;h:outputText value="\#{car.sold ? 'Sold': 'Sale'}" /&gt;
        &lt;/p:column&gt;

        &lt;p:column filterBy="\#{car.price}" headerText="Price" footerText="custom (min)" filterFunction="\#{dtFilterView.filterByPrice}"&gt;
            &lt;h:outputText value="\#{car.price}"&gt;
                &lt;f:convertNumber currencySymbol="$" type="currency"/&gt;
            &lt;/h:outputText&gt;
        &lt;/p:column&gt;
    &lt;/p:dataTable&gt;
&lt;/h:form&gt;
                </pre>
            </p:tab>

            <p:tab title="FilterView.java">
                <pre name="code" class="brush:java">
package org.primefaces.showcase.view.data.datatable;

import java.io.Serializable;
import java.util.List;
import java.util.Locale;
import javax.annotation.PostConstruct;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ManagedProperty;
import javax.faces.bean.ViewScoped;
import org.primefaces.showcase.domain.Car;
import org.primefaces.showcase.service.CarService;

@ManagedBean(name="dtFilterView")
@ViewScoped
public class FilterView implements Serializable {
    
    private List&lt;Car&gt; cars;
    
    private List&lt;Car&gt; filteredCars;
    
    @ManagedProperty("\#{carService}")
    private CarService service;

    @PostConstruct
    public void init() {
        cars = service.createCars(10);
    }
    
    public boolean filterByPrice(Object value, Object filter, Locale locale) {
        String filterText = (filter == null) ? null : filter.toString().trim();
        if(filterText == null||filterText.equals("")) {
            return true;
        }
        
        if(value == null) {
            return false;
        }
        
        return ((Comparable) value).compareTo(Integer.valueOf(filterText)) &gt; 0;
    }
    
    public List&lt;String&gt; getBrands() {
        return service.getBrands();
    }
    
    public List&lt;String&gt; getColors() {
        return service.getColors();
    }
    
    public List&lt;Car&gt; getCars() {
        return cars;
    }

    public List&lt;Car&gt; getFilteredCars() {
        return filteredCars;
    }

    public void setFilteredCars(List&lt;Car&gt; filteredCars) {
        this.filteredCars = filteredCars;
    }

    public void setService(CarService service) {
        this.service = service;
    }
}
                </pre>
            </p:tab>
            
            <p:tab title="CarService.java">
                <pre name="code" class="brush:java">
package org.primefaces.showcase.service;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import javax.faces.bean.ApplicationScoped;
import javax.faces.bean.ManagedBean;
import org.primefaces.showcase.domain.Car;

@ManagedBean(name = "carService")
@ApplicationScoped
public class CarService {
    
    private final static String[] colors;
	
	private final static String[] brands;
    
    static {
		colors = new String[10];
		colors[0] = "Black";
		colors[1] = "White";
		colors[2] = "Green";
		colors[3] = "Red";
		colors[4] = "Blue";
		colors[5] = "Orange";
		colors[6] = "Silver";
		colors[7] = "Yellow";
		colors[8] = "Brown";
		colors[9] = "Maroon";
		
		brands = new String[10];
		brands[0] = "BMW";
		brands[1] = "Mercedes";
		brands[2] = "Volvo";
		brands[3] = "Audi";
		brands[4] = "Renault";
		brands[5] = "Fiat";
		brands[6] = "Volkswagen";
		brands[7] = "Honda";
		brands[8] = "Jaguar";
		brands[9] = "Ford";
	}
    
    public List&lt;Car&gt; createCars(int size) {
        List&lt;Car&gt; list = new ArrayList&lt;Car&gt;();
		for(int i = 0 ; i &lt; size ; i++) {
			list.add(new Car(getRandomId(), getRandomBrand(), getRandomYear(), getRandomColor(), getRandomPrice(), getRandomSoldState()));
        }
        
        return list;
    }
    
    private String getRandomId() {
		return UUID.randomUUID().toString().substring(0, 8);
	}
    
    private int getRandomYear() {
		return (int) (Math.random() * 50 + 1960);
	}
	
	private String getRandomColor() {
		return colors[(int) (Math.random() * 10)];
	}
	
	private String getRandomBrand() {
		return brands[(int) (Math.random() * 10)];
	}
    
    public int getRandomPrice() {
		return (int) (Math.random() * 100000);
	}
    
    public boolean getRandomSoldState() {
		return (Math.random() &gt; 0.5) ? true: false;
	}

    public List&lt;String&gt; getColors() {
        return Arrays.asList(colors);
    }
    
    public List&lt;String&gt; getBrands() {
        return Arrays.asList(brands);
    }
}
                </pre>
            </p:tab>
            
            <p:tab title="Documentation" titleStyleClass="tab-doc docslide-150" />
        </p:tabView>

    </ui:define>

</ui:composition>