<ui:composition xmlns="http://www.w3.org/1999/xhtml"
                xmlns:ui="http://java.sun.com/jsf/facelets"
                xmlns:h="http://java.sun.com/jsf/html"
                xmlns:f="http://java.sun.com/jsf/core"
                xmlns:p="http://primefaces.org/ui"
                template="/WEB-INF/template.xhtml">

    <ui:define name="title">
        DataTable - <span class="subitem">Lazy</span>
    </ui:define>

    <ui:define name="description">
        DataTable has built-in support to deal with huge datasets. In order to enable lazy loading, a LazyDataModel needs to be implemented
        to query the datasource when pagination, sorting, filtering or live scrolling happens. This example uses an in-memory list to mimic a real datasource like a database.
        <p><strong>In a real application, loading should be executed with the query built using the information passed to the load method.</strong></p>
    </ui:define>

    <ui:define name="implementation">
        
        <h:form id="form">
            <p:dataTable var="car" value="#{dtLazyView.lazyModel}" paginator="true" rows="10"
                         paginatorTemplate="{RowsPerPageDropdown} {FirstPageLink} {PreviousPageLink} {CurrentPageReport} {NextPageLink} {LastPageLink}"
                         rowsPerPageTemplate="5,10,15" selectionMode="single" selection="#{dtLazyView.selectedCar}" id="carTable" lazy="true">
                <p:ajax event="rowSelect" listener="#{dtLazyView.onRowSelect}" update=":form:carDetail" oncomplete="PF('carDialog').show()" />
                <p:column headerText="Id" sortBy="#{car.id}" filterBy="#{car.id}">
                    <h:outputText value="#{car.id}" />
                </p:column>
                <p:column headerText="Year" sortBy="#{car.year}" filterBy="#{car.year}">
                    <h:outputText value="#{car.year}" />
                </p:column>
                <p:column headerText="Brand" sortBy="#{car.brand}" filterBy="#{car.brand}">
                    <h:outputText value="#{car.brand}" />
                </p:column>
                <p:column headerText="Color" sortBy="#{car.color}" filterBy="#{car.color}">
                    <h:outputText value="#{car.color}" />
                </p:column>
            </p:dataTable>

            <p:dialog header="Car Detail" widgetVar="carDialog" modal="true" showEffect="fade" hideEffect="fade" resizable="false">
                <p:outputPanel id="carDetail" style="text-align:center;">
                    <p:panelGrid  columns="2" rendered="#{not empty dtLazyView.selectedCar}" columnClasses="label,value">
                        <f:facet name="header">
                            <p:graphicImage name="demo/images/car/#{dtLazyView.selectedCar.brand}-big.gif"/> 
                        </f:facet>
                        
                        <h:outputText value="Id:" />
                        <h:outputText value="#{dtLazyView.selectedCar.id}" />

                        <h:outputText value="Year" />
                        <h:outputText value="#{dtLazyView.selectedCar.year}" />

                        <h:outputText value="Color:" />
                        <h:outputText value="#{dtLazyView.selectedCar.color}" style="color:#{dtLazyView.selectedCar.color}"/>
                    
                        <h:outputText value="Price:" />
                        <h:outputText value="#{dtLazyView.selectedCar.price}">
                            <f:convertNumber type="currency" currencySymbol="$" />
                        </h:outputText>
                    </p:panelGrid>
                </p:outputPanel>
            </p:dialog>
        </h:form>
        
    </ui:define>

    <ui:define name="source">
        <p:tabView>
            <p:tab title="lazy.xhtml">
                <pre name="code" class="brush:xml">
&lt;h:form id="form"&gt;
    &lt;p:dataTable var="car" value="\#{dtLazyView.lazyModel}" paginator="true" rows="10"
                 paginatorTemplate="{RowsPerPageDropdown} {FirstPageLink} {PreviousPageLink} {CurrentPageReport} {NextPageLink} {LastPageLink}"
                 rowsPerPageTemplate="5,10,15" selectionMode="single" selection="\#{dtLazyView.selectedCar}" id="carTable" lazy="true"&gt;
        &lt;p:ajax event="rowSelect" listener="\#{dtLazyView.onRowSelect}" update=":form:carDetail" oncomplete="PF('carDialog').show()" /&gt;
        &lt;p:column headerText="Id" sortBy="\#{car.id}" filterBy="\#{car.id}"&gt;
            &lt;h:outputText value="\#{car.id}" /&gt;
        &lt;/p:column&gt;
        &lt;p:column headerText="Year" sortBy="\#{car.year}" filterBy="\#{car.year}"&gt;
            &lt;h:outputText value="\#{car.year}" /&gt;
        &lt;/p:column&gt;
        &lt;p:column headerText="Brand" sortBy="\#{car.brand}" filterBy="\#{car.brand}"&gt;
            &lt;h:outputText value="\#{car.brand}" /&gt;
        &lt;/p:column&gt;
        &lt;p:column headerText="Color" sortBy="\#{car.color}" filterBy="\#{car.color}"&gt;
            &lt;h:outputText value="\#{car.color}" /&gt;
        &lt;/p:column&gt;
    &lt;/p:dataTable&gt;

    &lt;p:dialog header="Car Detail" widgetVar="carDialog" modal="true" showEffect="fade" hideEffect="fade" resizable="false"&gt;
        &lt;p:outputPanel id="carDetail" style="text-align:center;"&gt;
            &lt;p:panelGrid  columns="2" rendered="\#{not empty dtLazyView.selectedCar}" columnClasses="label,value"&gt;
                &lt;f:facet name="header"&gt;
                    &lt;p:graphicImage name="demo/images/car/\#{dtLazyView.selectedCar.brand}-big.gif"/&gt; 
                &lt;/f:facet&gt;

                &lt;h:outputText value="Id:" /&gt;
                &lt;h:outputText value="\#{dtLazyView.selectedCar.id}" /&gt;

                &lt;h:outputText value="Year" /&gt;
                &lt;h:outputText value="\#{dtLazyView.selectedCar.year}" /&gt;

                &lt;h:outputText value="Color:" /&gt;
                &lt;h:outputText value="\#{dtLazyView.selectedCar.color}" style="color:\#{dtLazyView.selectedCar.color}"/&gt;

                &lt;h:outputText value="Price:" /&gt;
                &lt;h:outputText value="\#{dtLazyView.selectedCar.price}"&gt;
                    &lt;f:convertNumber type="currency" currencySymbol="$" /&gt;
                &lt;/h:outputText&gt;
            &lt;/p:panelGrid&gt;
        &lt;/p:outputPanel&gt;
    &lt;/p:dialog&gt;
&lt;/h:form&gt;
                </pre>
            </p:tab>

            <p:tab title="LazyView.java">
                <pre name="code" class="brush:java">
package org.primefaces.showcase.view.data.datatable;

import java.io.Serializable;
import javax.annotation.PostConstruct;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ManagedProperty;
import javax.faces.bean.ViewScoped;
import javax.faces.context.FacesContext;
import org.primefaces.event.SelectEvent;
import org.primefaces.model.LazyDataModel;
import org.primefaces.showcase.domain.Car;
import org.primefaces.showcase.service.CarService;

@ManagedBean(name="dtLazyView")
@ViewScoped
public class LazyView implements Serializable {
    
    private LazyDataModel&lt;Car&gt; lazyModel;
    
    private Car selectedCar;
    
    @ManagedProperty("\#{carService}")
    private CarService service;
    
    @PostConstruct
    public void init() {
        lazyModel = new LazyCarDataModel(service.createCars(200));
    }

    public LazyDataModel&lt;Car&gt; getLazyModel() {
        return lazyModel;
    }

    public Car getSelectedCar() {
        return selectedCar;
    }

    public void setSelectedCar(Car selectedCar) {
        this.selectedCar = selectedCar;
    }
    
    public void setService(CarService service) {
        this.service = service;
    }
    
    public void onRowSelect(SelectEvent event) {
        FacesMessage msg = new FacesMessage("Car Selected", ((Car) event.getObject()).getId());
        FacesContext.getCurrentInstance().addMessage(null, msg);
    }
}

                </pre>
            </p:tab>
            
            <p:tab title="CarService.java">
                <pre name="code" class="brush:java">
package org.primefaces.showcase.service;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import javax.faces.bean.ApplicationScoped;
import javax.faces.bean.ManagedBean;
import org.primefaces.showcase.domain.Car;

@ManagedBean(name = "carService")
@ApplicationScoped
public class CarService {
    
    private final static String[] colors;
	
	private final static String[] brands;
    
    static {
		colors = new String[10];
		colors[0] = "Black";
		colors[1] = "White";
		colors[2] = "Green";
		colors[3] = "Red";
		colors[4] = "Blue";
		colors[5] = "Orange";
		colors[6] = "Silver";
		colors[7] = "Yellow";
		colors[8] = "Brown";
		colors[9] = "Maroon";
		
		brands = new String[10];
		brands[0] = "BMW";
		brands[1] = "Mercedes";
		brands[2] = "Volvo";
		brands[3] = "Audi";
		brands[4] = "Renault";
		brands[5] = "Fiat";
		brands[6] = "Volkswagen";
		brands[7] = "Honda";
		brands[8] = "Jaguar";
		brands[9] = "Ford";
	}
    
    public List&lt;Car&gt; createCars(int size) {
        List&lt;Car&gt; list = new ArrayList&lt;Car&gt;();
		for(int i = 0 ; i &lt; size ; i++) {
			list.add(new Car(getRandomId(), getRandomBrand(), getRandomYear(), getRandomColor(), getRandomPrice(), getRandomSoldState()));
        }
        
        return list;
    }
    
    private String getRandomId() {
		return UUID.randomUUID().toString().substring(0, 8);
	}
    
    private int getRandomYear() {
		return (int) (Math.random() * 50 + 1960);
	}
	
	private String getRandomColor() {
		return colors[(int) (Math.random() * 10)];
	}
	
	private String getRandomBrand() {
		return brands[(int) (Math.random() * 10)];
	}
    
    public int getRandomPrice() {
		return (int) (Math.random() * 100000);
	}
    
    public boolean getRandomSoldState() {
		return (Math.random() &gt; 0.5) ? true: false;
	}

    public List&lt;String&gt; getColors() {
        return Arrays.asList(colors);
    }
    
    public List&lt;String&gt; getBrands() {
        return Arrays.asList(brands);
    }
}
                </pre>
            </p:tab>
            
            <p:tab title="LazyCarDataModel.java">
                <pre name="code" class="brush:java">
package org.primefaces.showcase.view.data.datatable;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import org.primefaces.model.LazyDataModel;
import org.primefaces.model.SortOrder;
import org.primefaces.showcase.domain.Car;

/**
 * Dummy implementation of LazyDataModel that uses a list to mimic a real datasource like a database.
 */
public class LazyCarDataModel extends LazyDataModel&lt;Car&gt; {
    
    private List&lt;Car&gt; datasource;
    
    public LazyCarDataModel(List&lt;Car&gt; datasource) {
        this.datasource = datasource;
    }
    
    @Override
    public Car getRowData(String rowKey) {
        for(Car car : datasource) {
            if(car.getId().equals(rowKey))
                return car;
        }

        return null;
    }

    @Override
    public Object getRowKey(Car car) {
        return car.getId();
    }

    @Override
    public List&lt;Car&gt; load(int first, int pageSize, String sortField, SortOrder sortOrder, Map&lt;String,Object&gt; filters) {
        List&lt;Car&gt; data = new ArrayList&lt;Car&gt;();

        //filter
        for(Car car : datasource) {
            boolean match = true;

            if (filters != null) {
                for (Iterator&lt;String&gt; it = filters.keySet().iterator(); it.hasNext();) {
                    try {
                        String filterProperty = it.next();
                        Object filterValue = filters.get(filterProperty);
                        String fieldValue = String.valueOf(car.getClass().getField(filterProperty).get(car));

                        if(filterValue == null || fieldValue.startsWith(filterValue.toString())) {
                            match = true;
                    }
                    else {
                            match = false;
                            break;
                        }
                    } catch(Exception e) {
                        match = false;
                    }
                }
            }

            if(match) {
                data.add(car);
            }
        }

        //sort
        if(sortField != null) {
            Collections.sort(data, new LazySorter(sortField, sortOrder));
        }

        //rowCount
        int dataSize = data.size();
        this.setRowCount(dataSize);

        //paginate
        if(dataSize &gt; pageSize) {
            try {
                return data.subList(first, first + pageSize);
            }
            catch(IndexOutOfBoundsException e) {
                return data.subList(first, first + (dataSize % pageSize));
            }
        }
        else {
            return data;
        }
    }
}
                </pre>
            </p:tab>
            
            <p:tab title="LazySorter.java">
                <pre name="code" class="brush:java">
package org.primefaces.showcase.view.data.datatable;

import java.util.Comparator;
import org.primefaces.model.SortOrder;
import org.primefaces.showcase.domain.Car;

public class LazySorter implements Comparator&lt;Car&gt; {

    private String sortField;
    
    private SortOrder sortOrder;
    
    public LazySorter(String sortField, SortOrder sortOrder) {
        this.sortField = sortField;
        this.sortOrder = sortOrder;
    }

    public int compare(Car car1, Car car2) {
        try {
            Object value1 = Car.class.getField(this.sortField).get(car1);
            Object value2 = Car.class.getField(this.sortField).get(car2);

            int value = ((Comparable)value1).compareTo(value2);
            
            return SortOrder.ASCENDING.equals(sortOrder) ? value : -1 * value;
        }
        catch(Exception e) {
            throw new RuntimeException();
        }
    }
}
                </pre>
            </p:tab>
        </p:tabView>

    </ui:define>

</ui:composition>