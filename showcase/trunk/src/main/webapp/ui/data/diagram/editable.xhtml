<ui:composition xmlns="http://www.w3.org/1999/xhtml"
                xmlns:ui="http://java.sun.com/jsf/facelets"
                xmlns:h="http://java.sun.com/jsf/html"
                xmlns:f="http://java.sun.com/jsf/core"
                xmlns:p="http://primefaces.org/ui"
                template="./template.xhtml"
                xmlns:c="http://xmlns.jcp.org/jsp/jstl/core">

    <ui:define name="head">
        <style type="text/css">
            .ui-diagram-element {
                border:0.1em dotted #d4e06b; 
                background-color: #d4e06b;
                width:10em; 
                height:4em; 	
                line-height:4em;
                text-align: center;
                box-shadow: 0 5px 10px rgba(0, 0, 0, 0.8);
            }
        </style>

        <script type="text/javascript">
//<![CDATA[
/**
 * PrimeFaces Diagram Widget
 */
PrimeFaces.widget.Diagram = PrimeFaces.widget.BaseWidget.extend({

    init: function(cfg) {
        this._super(cfg);
        
        var $this = this;
        
        jsPlumb.ready(function() {
            $this.canvas = jsPlumb.getInstance({
                Container: $this.jq.attr('id'),
                Connector: $this.cfg.defaultConnector,
                PaintStyle: $this.cfg.paintStyle,
                HoverPaintStyle: $this.cfg.hoverPaintStyle,
                ConnectionOverlays: $this.cfg.connectionOverlays,
                ConnectionsDetachable: ($this.cfg.connectionsDetachable === false) ? false : true
            });

            $this.canvas.doWhileSuspended(function()Â {
                $this.initEndPoints();
                $this.initConnections();
                
                $this.canvas.draggable($this.jq.children('.ui-diagram-draggable'), {
                    containment: true
                });
            });
            
            $this.bindEvents();
            
            
        });
    },    
    
    initEndPoints: function() {
        for(var i = 0; i < this.cfg.endPoints.length; i++) {
            var endPoint = this.cfg.endPoints[i];
                        
            this.canvas.addEndpoint(endPoint.element, endPoint);
        }
    },
    
    initConnections: function() {
        if(this.cfg.connections) {
            for(var i = 0; i < this.cfg.connections.length; i++) {      
                this.canvas.connect(this.cfg.connections[i]);
            }
        }
    },
    
    bindEvents: function() {
        var $this = this;
        
        this.canvas.bind('connection', function(info) {
            $this.onConnect(info);
        });

        this.canvas.bind('connectionDetached', function(info) {
            $this.onDisconnect(info);
        });

        this.canvas.bind('connectionMoved', function(info) {
            $this.onConnectionChange(info);
        });
    },
    
    onConnect: function(info) {
        var options = {
            source: this.id,
            process: this.id,
            params: [
                {name: this.id + '_connect', value: true},
                {name: this.id + '_sourceId', value: info.sourceId.substring(this.id.length + 1)},
                {name: this.id + '_targetId', value: info.targetId.substring(this.id.length + 1)},
                {name: this.id + '_sourceEndPointId', value: info.sourceEndpoint.getUuid()},
                {name: this.id + '_targetEndPointId', value: info.targetEndpoint.getUuid()}
            ]
        };
        
        if(this.hasBehavior('connect')) {
            var behavior = this.cfg.behaviors['connect'];

            behavior.call(this, options);
        } 
        else {
            PrimeFaces.ajax.Request.handle(options); 
        }
    },
    
    onDisconnect: function(info) {
        var options = {
            source: this.id,
            process: this.id,
            params: [
                {name: this.id + '_disconnect', value: true},
                {name: this.id + '_sourceId', value: info.sourceId.substring(this.id.length + 1)},
                {name: this.id + '_targetId', value: info.targetId.substring(this.id.length + 1)},
                {name: this.id + '_sourceEndPointId', value: info.sourceEndpoint.getUuid()},
                {name: this.id + '_targetEndPointId', value: info.targetEndpoint.getUuid()}
            ]
        };
        
        if(this.hasBehavior('disconnect')) {
            var behavior = this.cfg.behaviors['disconnect'];

            behavior.call(this, options);
        } 
        else {
            PrimeFaces.ajax.Request.handle(options); 
        }
    },
    
    onConnectionChange: function(info) {
        var options = {
            source: this.id,
            process: this.id,
            params: [
                {name: this.id + '_connectionChange', value: true},
                {name: this.id + '_originalSourceId', value: info.originalSourceId.substring(this.id.length + 1)},
                {name: this.id + '_newSourceId', value: info.newSourceId.substring(this.id.length + 1)},
                {name: this.id + '_originalTargetId', value: info.originalTargetId.substring(this.id.length + 1)},
                {name: this.id + '_newTargetId', value: info.newTargetId.substring(this.id.length + 1)},
                {name: this.id + '_originalSourceEndPointId', value: info.originalSourceEndpoint.getUuid()},
                {name: this.id + '_newSourceEndPointId', value: info.newSourceEndpoint.getUuid()},
                {name: this.id + '_originalTargetEndPointId', value: info.originalTargetEndpoint.getUuid()},
                {name: this.id + '_newTargetEndPointId', value: info.newTargetEndpoint.getUuid()}
            ]
        };
        
        if(this.hasBehavior('connectionChange')) {
            var behavior = this.cfg.behaviors['connectionChange'];

            behavior.call(this, options);
        } 
        else {
            PrimeFaces.ajax.Request.handle(options); 
        }
    },
    
    hasBehavior: function(event) {
        if(this.cfg.behaviors) {
            return this.cfg.behaviors[event] != undefined;
        }
    
        return false;
    }

});
//]]>
		</script>

	</ui:define>
    
    <ui:define name="title">
        Diagram - <span class="subitem">Editable</span>
    </ui:define>

    <ui:define name="description">
        Connections can be created and edited on the fly using drag and drop. In this example, rectangle endpoints are sources whereas 
        circle endpoints are the targets. Once a connection is created, removed or changed, diagram makes an ajax request to save changes in the backend model. Additionally, optional
        ajax events are provided as callbacks.
    </ui:define>

    <ui:define name="implementation">
        <h:form id="form">
            <p:growl id="msgs" showDetail="true" />
            
            <p:diagram value="#{diagramEditableView.model}" style="height:400px" styleClass="ui-widget-content">
                <p:ajax event="connect" listener="#{diagramEditableView.onConnect}" />
                <p:ajax event="disconnect" listener="#{diagramEditableView.onDisconnect}" />
                <p:ajax event="connectionChange" listener="#{diagramEditableView.onConnectionChange}" />
            </p:diagram>
        </h:form>
        
    </ui:define>

    <ui:define name="source">
        <p:tabView>
            <p:tab title="basic.xhtml">
                <pre name="code" class="brush:xml">
                </pre>
            </p:tab>
        </p:tabView>

    </ui:define>

</ui:composition>
