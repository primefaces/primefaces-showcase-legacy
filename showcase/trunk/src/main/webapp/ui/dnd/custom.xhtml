<ui:composition xmlns="http://www.w3.org/1999/xhtml"
                xmlns:ui="http://java.sun.com/jsf/facelets"
                xmlns:h="http://java.sun.com/jsf/html"
                xmlns:f="http://java.sun.com/jsf/core"
                xmlns:p="http://primefaces.org/ui"
                template="/WEB-INF/template.xhtml">
    
    <ui:define name="head">
        <script type="text/javascript">
            function initDND() {
                $('.ui-treenode-leaf').draggable({
                   helper: 'clone',
                   scope: 'treetotable',
                   zIndex: ++PrimeFaces.zindex
                });

                $('.ui-datatable .droppoint').droppable({
                   activeClass: 'ui-state-active',
                   hoverClass: 'ui-state-highlight',
                   tolerance: 'pointer',
                   scope: 'treetotable',
                   drop: function(event, ui) {
                       var property = ui.draggable.find('.ui-treenode-label').text(),
                       droppedColumnId = $(this).parents('th:first').attr('id'),
                       dropPos = $(this).hasClass('dropleft') ? 0 : 1;

                       treeToTable([
                            {name: 'property', value:  property}
                           ,{name: 'droppedColumnId', value: droppedColumnId}
                           ,{name: 'dropPos', value: dropPos}
                       ]);
                   }
                });

                $('.ui-datatable th').draggable({
                   scope: 'tabletotree',
                   helper: function() {
                       var th = $(this);

                       return th.clone().appendTo(document.body).css('width', th.width());
                   }
                });

                $('.ui-tree').droppable({
                   helper: 'clone',
                   scope: 'tabletotree',
                   activeClass: 'ui-state-active',
                   hoverClass: 'ui-state-highlight',
                   tolerance: 'touch',
                   drop: function(event, ui) {                               
                       tableToTree([
                           {name: 'colIndex', value:  ui.draggable.index()}
                       ]);
                   }
                });
            }

            $(function() {
                initDND();
            });
        </script>
    </ui:define>

    <ui:define name="title">
        DragDrop - <span class="orange">Custom</span>
    </ui:define>

    <ui:define name="description">
        This sample demonstrates how to extend PrimeFaces with javascript. Tree component displays the available columns which are draggable. 
        where as column headers have drop targets and dropping a treenode onto one of these adds the related property column to the datatable. 
        Column headers can also be moved back to the tree.
    </ui:define>

    <ui:define name="implementation">
        
        <h:form id="form">
            <p:remoteCommand name="treeToTable" actionListener="#{columnManagerView.treeToTable}" update="tree cars" oncomplete="initDND()"/>
            <p:remoteCommand name="tableToTree" actionListener="#{columnManagerView.tableToTree}" update="tree cars" oncomplete="initDND()"/>

            <p:tree id="tree" value="#{columnManagerView.availableColumns}" var="column" style="margin-bottom:20px">
                <p:treeNode>
                    <h:outputText value="#{column}" />
                </p:treeNode>

                <p:treeNode type="column" icon="ui-icon-grip-dotted-vertical">
                    <h:outputText value="#{column.property}" />
                </p:treeNode>
            </p:tree>

            <p:dataTable id="cars" var="car" value="#{columnManagerView.cars}">                    
                <p:columns value="#{columnManagerView.columns}" var="column">
                    <f:facet name="header">
                        <h:outputText style="float:left;display:block;height:20px;width:10px;border:0 none;" styleClass="droppoint dropleft" />                           
                        <h:outputText style="float:right;display:block;height:20px;width:10px;border:0 none;" styleClass="droppoint dropright" />
                        <h:outputText value="#{column.header}" />
                    </f:facet>

                    <h:outputText value="#{car[column.property]}" />
                </p:columns>
            </p:dataTable>
        </h:form>
        
    </ui:define>

    <ui:define name="source">
        <p:tabView>
            <p:tab title="custom.xhtml">
                <pre name="code" class="brush:xml">
&lt;h:form id="form"&gt;
    &lt;p:remoteCommand name="treeToTable" actionListener="\#{columnManagerView.treeToTable}" update="tree cars" oncomplete="initDND()"/&gt;
    &lt;p:remoteCommand name="tableToTree" actionListener="\#{columnManagerView.tableToTree}" update="tree cars" oncomplete="initDND()"/&gt;

    &lt;p:tree id="tree" value="\#{columnManagerView.availableColumns}" var="column" style="margin-bottom:20px"&gt;
        &lt;p:treeNode&gt;
            &lt;h:outputText value="\#{column}" /&gt;
        &lt;/p:treeNode&gt;

        &lt;p:treeNode type="column" icon="ui-icon-grip-dotted-vertical"&gt;
            &lt;h:outputText value="\#{column.property}" /&gt;
        &lt;/p:treeNode&gt;
    &lt;/p:tree&gt;

    &lt;p:dataTable id="cars" var="car" value="\#{columnManagerView.cars}"&gt;                    
        &lt;p:columns value="\#{columnManagerView.columns}" var="column"&gt;
            &lt;f:facet name="header"&gt;
                &lt;h:outputText style="float:left;display:block;height:20px;width:10px;border:0 none;" styleClass="droppoint dropleft" /&gt;                           
                &lt;h:outputText style="float:right;display:block;height:20px;width:10px;border:0 none;" styleClass="droppoint dropright" /&gt;
                &lt;h:outputText value="\#{column.header}" /&gt;
            &lt;/f:facet&gt;

            &lt;h:outputText value="\#{car[column.property]}" /&gt;
        &lt;/p:columns&gt;
    &lt;/p:dataTable&gt;
&lt;/h:form&gt;
                </pre>
            </p:tab>
            
            <p:tab title="Script">
                <pre name="code" class="brush:xml">
&lt;script type="text/javascript"&gt;
    function initDND() {
        $('.ui-treenode-leaf').draggable({
           helper: 'clone',
           scope: 'treetotable',
           zIndex: ++PrimeFaces.zindex
        });

        $('.ui-datatable .droppoint').droppable({
           activeClass: 'ui-state-active',
           hoverClass: 'ui-state-highlight',
           tolerance: 'pointer',
           scope: 'treetotable',
           drop: function(event, ui) {
               var property = ui.draggable.find('.ui-treenode-label').text(),
               droppedColumnId = $(this).parents('th:first').attr('id'),
               dropPos = $(this).hasClass('dropleft') ? 0 : 1;

               treeToTable([
                    {name: 'property', value:  property}
                   ,{name: 'droppedColumnId', value: droppedColumnId}
                   ,{name: 'dropPos', value: dropPos}
               ]);
           }
        });

        $('.ui-datatable th').draggable({
           scope: 'tabletotree',
           helper: function() {
               var th = $(this);

               return th.clone().appendTo(document.body).css('width', th.width());
           }
        });

        $('.ui-tree').droppable({
           helper: 'clone',
           scope: 'tabletotree',
           activeClass: 'ui-state-active',
           hoverClass: 'ui-state-highlight',
           tolerance: 'touch',
           drop: function(event, ui) {                               
               tableToTree([
                   {name: 'colIndex', value:  ui.draggable.index()}
               ]);
           }
        });
    }

    $(function() {
        initDND();
    });
&lt;/script&gt;
                </pre>
            </p:tab>

            <p:tab title="ColumnManagerView.java">
                <pre name="code" class="brush:java">
package org.primefaces.showcase.view.dnd;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import javax.annotation.PostConstruct;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ManagedProperty;
import javax.faces.bean.ViewScoped;
import javax.faces.context.FacesContext;
import org.primefaces.model.DefaultTreeNode;
import org.primefaces.model.TreeNode;
import org.primefaces.showcase.domain.Car;
import org.primefaces.showcase.service.CarService;

@ManagedBean
@ViewScoped
public class ColumnManagerView implements Serializable {
    
    private final List&lt;String&gt; VALID_COLUMN_KEYS = Arrays.asList("id", "brand", "year", "color");
    
    private List&lt;ColumnModel&gt; columns = new ArrayList&lt;ColumnModel&gt;();
    
    private List&lt;Car&gt; cars;
    
    private TreeNode availableColumns;
    
    @ManagedProperty("#{carService}")
    private CarService service;
    
    @PostConstruct
    public void init() {
        cars = service.createCars(9);
        createAvailableColumns();
        createDynamicColumns();
    }
    
    private void createAvailableColumns() {
        availableColumns = new DefaultTreeNode("Root", null);
        TreeNode root = new DefaultTreeNode("Columns", availableColumns);
        root.setExpanded(true);
        TreeNode model = new DefaultTreeNode("column", new ColumnModel("Id", "id"), root);
        TreeNode year = new DefaultTreeNode("column", new ColumnModel("Year", "year"), root);
        TreeNode manufacturer = new DefaultTreeNode("column", new ColumnModel("Brand", "brand"), root);
        TreeNode color = new DefaultTreeNode("column", new ColumnModel("Color", "color"), root);
    }
      
    public void createDynamicColumns() {
        String[] columnKeys = new String[]{"id","year","brand"};
        columns.clear();  
         
        for(String columnKey : columnKeys) {
            String key = columnKey.trim();
             
            if(VALID_COLUMN_KEYS.contains(key)) {
                columns.add(new ColumnModel(columnKey.toUpperCase(), columnKey));
            }
        }
    }
        
    public void treeToTable() {
        Map&lt;String,String&gt; params = FacesContext.getCurrentInstance().getExternalContext().getRequestParameterMap();
        String property = params.get("property");
        String droppedColumnId = params.get("droppedColumnId");
        String dropPos = params.get("dropPos");
         
        String[] droppedColumnTokens = droppedColumnId.split(":");
        int draggedColumnIndex = Integer.parseInt(droppedColumnTokens[droppedColumnTokens.length - 1]);
        int dropColumnIndex = draggedColumnIndex + Integer.parseInt(dropPos);
         
        //add to columns
        this.columns.add(dropColumnIndex, new ColumnModel(property.toUpperCase(), property));
         
        //remove from nodes
        TreeNode root = availableColumns.getChildren().get(0);
        for(TreeNode node : root.getChildren()) {
            ColumnModel model = (ColumnModel) node.getData();
            if(model.getProperty().equals(property)) {
                root.getChildren().remove(node);
                break;
            }
        }
    }
     
    public void tableToTree() {
        Map&lt;String,String&gt; params = FacesContext.getCurrentInstance().getExternalContext().getRequestParameterMap();
        int colIndex = Integer.parseInt(params.get("colIndex"));
         
        //remove from table
        ColumnModel model = this.columns.remove(colIndex);
         
        //add to nodes
        TreeNode property = new DefaultTreeNode("column", model, availableColumns.getChildren().get(0));
    }

    public List&lt;Car&gt; getCars() {
        return cars;
    }

    public List&lt;ColumnModel&gt; getColumns() {
        return columns;
    }

    public TreeNode getAvailableColumns() {
        return availableColumns;
    }

    public void setService(CarService service) {
        this.service = service;
    }
    
    static public class ColumnModel implements Serializable {
 
        private String header;
        private String property;
 
        public ColumnModel(String header, String property) {
            this.header = header;
            this.property = property;
        }
 
        public String getHeader() {
            return header;
        }
 
        public String getProperty() {
            return property;
        }
    }
}
                </pre>
            </p:tab>
        </p:tabView>

    </ui:define>

</ui:composition>