<ui:composition xmlns="http://www.w3.org/1999/xhtml"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:f="http://java.sun.com/jsf/core"
    xmlns:ui="http://java.sun.com/jsf/facelets"
	xmlns:p="http://primefaces.org/ui"
    xmlns:pm="http://primefaces.org/mobile"
    xmlns:pt="http://xmlns.jcp.org/jsf/passthrough"
    template="/WEB-INF/mobile.xhtml">
    
    <ui:define name="content">
        <pm:content styleClass="jqm-content">
            <h1>DataTable (since v5.1.2)</h1>
            <p>DataTable presents a collection of data in a responsive tabular layout. Columns can be given priority to define visibility depending 
            on screen size and optional reflow mode enables stacking on smaller screens.</p>
            
            <h:form id="form">
                <p:growl id="msgs" showDetail="true" />                
                
                <h2 class="first">Column Toggle</h2>
                <p>In column toggle mode, visibility of columns are toggled based on their priority value.</p>
                <p:dataTable var="car" value="#{dtMobileView.cars1}" tableStyleClass="ui-table-columntoggle">
                    <p:column headerText="Id" priority="1">
                        <h:outputText value="#{car.id}" />
                    </p:column>

                    <p:column headerText="Year" priority="2">
                        <h:outputText value="#{car.year}" />
                    </p:column>

                    <p:column headerText="Brand" priority="1">
                        <h:outputText value="#{car.brand}" />
                    </p:column>

                    <p:column headerText="Color" priority="2">
                        <h:outputText value="#{car.color}"/>
                    </p:column>
                </p:dataTable>
                
                <h2>Reflow Mode</h2>
                <p>In reflow mode, datatable displays its content as stacked.</p>
                <p:dataTable var="car" value="#{dtMobileView.cars2}" tableStyleClass="ui-table-reflow">
                    <p:column headerText="Id">
                        <h:outputText value="#{car.id}" />
                    </p:column>

                    <p:column headerText="Year">
                        <h:outputText value="#{car.year}" />
                    </p:column>

                    <p:column headerText="Brand">
                        <h:outputText value="#{car.brand}" />
                    </p:column>

                    <p:column headerText="Color">
                        <h:outputText value="#{car.color}" />
                    </p:column>
                </p:dataTable>
                
                <h2>Advanced</h2>
                <p>In addition to the responsive modes, core features such as pagination, sorting, lazy loading, dynamic columns, grouping, single and multiple selection are provided.
                Mobile specific events like swipeleft, swiperight, tap and taphold are available as ajax behaviors. In following datatable, swipeleft to display information in an overlay and swiperight to remove the record.</p>
                <p:dataTable id="cars" var="car" value="#{dtMobileView.cars3}" selectionMode="multiple" selection="#{dtSelectionView.selectedCars}" rowKey="#{car.id}"
                             paginator="true" rows="10" tableStyleClass="ui-table-columntoggle">
                    
                    <p:ajax event="swipeleft" listener="#{dtMobileView.onRowSwipeLeft}" update="@parent:msgs" />
                    <p:ajax event="swiperight" listener="#{dtMobileView.onRowSwipeRight}" update="@this" />
                    
                    <p:column headerText="Id" sortBy="#{car.id}" priority="1">
                        <h:outputText value="#{car.id}" />
                    </p:column>

                    <p:column headerText="Year" sortBy="#{car.year}" priority="2">
                        <h:outputText value="#{car.year}" />
                    </p:column>

                    <p:column headerText="Brand" sortBy="#{car.brand}" priority="1">
                        <h:outputText value="#{car.brand}" />
                    </p:column>

                    <p:column headerText="Color" sortBy="#{car.color}" priority="2">
                        <h:outputText value="#{car.color}" />
                    </p:column>
                </p:dataTable>
                
            </h:form>
            
            <h2>Source</h2>
            <p:accordionPanel activeIndex="-1">
                <p:tab title="dataTable.xhtml">
                    <pre class="brush:xml">
&lt;h:form id="form"&gt;
    &lt;p:growl id="msgs" showDetail="true" /&gt;                

    &lt;h2 class="first"&gt;Column Toggle&lt;/h2&gt;
    &lt;p:dataTable var="car" value="\#{dtMobileView.cars1}" tableStyleClass="ui-table-columntoggle"&gt;
        &lt;p:column headerText="Id" priority="1"&gt;
            &lt;h:outputText value="\#{car.id}" /&gt;
        &lt;/p:column&gt;

        &lt;p:column headerText="Year" priority="2"&gt;
            &lt;h:outputText value="\#{car.year}" /&gt;
        &lt;/p:column&gt;

        &lt;p:column headerText="Brand" priority="1"&gt;
            &lt;h:outputText value="\#{car.brand}" /&gt;
        &lt;/p:column&gt;

        &lt;p:column headerText="Color" priority="2"&gt;
            &lt;h:outputText value="\#{car.color}"/&gt;
        &lt;/p:column&gt;
    &lt;/p:dataTable&gt;

    &lt;h2&gt;Reflow Mode&lt;/h2&gt;
    &lt;p:dataTable var="car" value="\#{dtMobileView.cars2}" tableStyleClass="ui-table-reflow"&gt;
        &lt;p:column headerText="Id"&gt;
            &lt;h:outputText value="\#{car.id}" /&gt;
        &lt;/p:column&gt;

        &lt;p:column headerText="Year"&gt;
            &lt;h:outputText value="\#{car.year}" /&gt;
        &lt;/p:column&gt;

        &lt;p:column headerText="Brand"&gt;
            &lt;h:outputText value="\#{car.brand}" /&gt;
        &lt;/p:column&gt;

        &lt;p:column headerText="Color"&gt;
            &lt;h:outputText value="\#{car.color}" /&gt;
        &lt;/p:column&gt;
    &lt;/p:dataTable&gt;

    &lt;h2&gt;Advanced&lt;/h2&gt;
    &lt;p:dataTable id="cars" var="car" value="\#{dtMobileView.cars3}" selectionMode="multiple" selection="\#{dtSelectionView.selectedCars}" rowKey="\#{car.id}"
                 paginator="true" rows="10" tableStyleClass="ui-table-columntoggle"&gt;

        &lt;p:ajax event="swipeleft" listener="\#{dtMobileView.onRowSwipeLeft}" update="@parent:msgs" /&gt;
        &lt;p:ajax event="swiperight" listener="\#{dtMobileView.onRowSwipeRight}" update="@this"/&gt;

        &lt;p:column headerText="Id" sortBy="\#{car.id}" priority="1"&gt;
            &lt;h:outputText value="\#{car.id}" /&gt;
        &lt;/p:column&gt;

        &lt;p:column headerText="Year" sortBy="\#{car.year}" priority="2"&gt;
            &lt;h:outputText value="\#{car.year}" /&gt;
        &lt;/p:column&gt;

        &lt;p:column headerText="Brand" sortBy="\#{car.brand}" priority="1"&gt;
            &lt;h:outputText value="\#{car.brand}" /&gt;
        &lt;/p:column&gt;

        &lt;p:column headerText="Color" sortBy="\#{car.color}" priority="2"&gt;
            &lt;h:outputText value="\#{car.color}" /&gt;
        &lt;/p:column&gt;
    &lt;/p:dataTable&gt;

&lt;/h:form&gt;
                    </pre>
                </p:tab>
                
                <p:tab title="DatatableView.xhtml">
                    <pre class="brush:java">
package org.primefaces.showcase.mobile;

import java.io.Serializable;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ManagedProperty;
import javax.faces.bean.ViewScoped;
import javax.faces.context.FacesContext;
import org.primefaces.event.SelectEvent;
import org.primefaces.mobile.event.SwipeEvent;
import org.primefaces.showcase.domain.Car;
import org.primefaces.showcase.service.CarService;

@ManagedBean(name="dtMobileView")
@ViewScoped
public class DatatableView implements Serializable {
    
    private List&lt;Car&gt; cars1;
    private List&lt;Car&gt; cars2;
    private List&lt;Car&gt; cars3;
    private List&lt;Car&gt; selectedCars;
   
    @ManagedProperty("\#{carService}")
    private CarService service;
    
    @PostConstruct
    public void init() {
        cars1 = service.createCars(10);
        cars2 = service.createCars(10);
        cars3 = service.createCars(50);
    }

    public List&lt;Car&gt; getCars1() {
        return cars1;
    }

    public List&lt;Car&gt; getCars2() {
        return cars2;
    }

    public List&lt;Car&gt; getCars3() {
        return cars3;
    }
    
    public void setService(CarService service) {
        this.service = service;
    }

    public List&lt;Car&gt; getSelectedCars() {
        return selectedCars;
    }

    public void setSelectedCars(List&lt;Car&gt; selectedCars) {
        this.selectedCars = selectedCars;
    }
        
    public void onRowSwipeRight(SwipeEvent event) {
        Car car = ((Car) event.getData());
        cars3.remove(car);
        
        if(selectedCars != null &amp;&amp; !selectedCars.isEmpty()) {
            selectedCars.remove(car);
        }
    }
    
    public void onRowSwipeLeft(SwipeEvent event) {
        FacesMessage msg = new FacesMessage("Swiped Left", ((Car) event.getData()).getId());
        FacesContext.getCurrentInstance().addMessage(null, msg);
    }
}
                    </pre>
                </p:tab>
                
                <p:tab title="CarService.java">
                    <pre class="brush:java">
package org.primefaces.showcase.service;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import javax.faces.bean.ApplicationScoped;
import javax.faces.bean.ManagedBean;
import org.primefaces.showcase.domain.Car;

@ManagedBean(name = "carService")
@ApplicationScoped
public class CarService {
    
    private final static String[] colors;
	
	private final static String[] brands;
    
    static {
		colors = new String[10];
		colors[0] = "Black";
		colors[1] = "White";
		colors[2] = "Green";
		colors[3] = "Red";
		colors[4] = "Blue";
		colors[5] = "Orange";
		colors[6] = "Silver";
		colors[7] = "Yellow";
		colors[8] = "Brown";
		colors[9] = "Maroon";
		
		brands = new String[10];
		brands[0] = "BMW";
		brands[1] = "Mercedes";
		brands[2] = "Volvo";
		brands[3] = "Audi";
		brands[4] = "Renault";
		brands[5] = "Fiat";
		brands[6] = "Volkswagen";
		brands[7] = "Honda";
		brands[8] = "Jaguar";
		brands[9] = "Ford";
	}
    
    public List&lt;Car&gt; createCars(int size) {
        List&lt;Car&gt; list = new ArrayList&lt;Car&gt;();
		for(int i = 0 ; i &lt; size ; i++) {
			list.add(new Car(getRandomId(), getRandomBrand(), getRandomYear(), getRandomColor(), getRandomPrice(), getRandomSoldState()));
        }
        
        return list;
    }
    
    private String getRandomId() {
		return UUID.randomUUID().toString().substring(0, 8);
	}
    
    private int getRandomYear() {
		return (int) (Math.random() * 50 + 1960);
	}
	
	private String getRandomColor() {
		return colors[(int) (Math.random() * 10)];
	}
	
	private String getRandomBrand() {
		return brands[(int) (Math.random() * 10)];
	}
    
    public int getRandomPrice() {
		return (int) (Math.random() * 100000);
	}
    
    public boolean getRandomSoldState() {
		return (Math.random() &gt; 0.5) ? true: false;
	}

    public List&lt;String&gt; getColors() {
        return Arrays.asList(colors);
    }
    
    public List&lt;String&gt; getBrands() {
        return Arrays.asList(brands);
    }
}                    
                    </pre>
                </p:tab>
            </p:accordionPanel>

        </pm:content>
    </ui:define>
    
</ui:composition>