<ui:composition xmlns="http://www.w3.org/1999/xhtml"
                xmlns:ui="http://java.sun.com/jsf/facelets"
                xmlns:h="http://java.sun.com/jsf/html"
                xmlns:f="http://java.sun.com/jsf/core"
                xmlns:p="http://primefaces.org/ui"
                template="./template.xhtml">

    <ui:define name="head">
        <style type="text/css">
            .ui-treetable table {
                table-layout: fixed
            }
            
            .value {
                font-weight: bold
            }
        </style>
    </ui:define>
    
    <ui:define name="title">
        TreeTable - <span class="subitem">Basic</span>
    </ui:define>

    <ui:define name="description">
        TreeTable displays hierachical data in tabular format.
    </ui:define>

    <ui:define name="implementation">
        
        <h:form id="form">
            <p:treeTable value="#{ttBasicView.root}" var="document">
                <f:facet name="header">
                    Document Viewer
                </f:facet>
                <p:column headerText="Name">
                    <h:outputText value="#{document.name}" />
                </p:column>
                <p:column headerText="Size">
                    <h:outputText value="#{document.size}" />
                </p:column>
                <p:column headerText="Type">
                    <h:outputText value="#{document.type}" />
                </p:column>
                <p:column style="width:24px">
                    <p:commandLink update=":form:documentPanel" oncomplete="PF('documentDialog').show()" title="View Detail" styleClass="ui-icon ui-icon-search">
                        <f:setPropertyActionListener value="#{document}" target="#{ttBasicView.selectedDocument}" />
                    </p:commandLink>
                </p:column>
            </p:treeTable>
            
            <p:dialog id="dialog" header="Document Detail" showEffect="fade" widgetVar="documentDialog" modal="true" resizable="false">
                <p:outputPanel id="documentPanel">
                    <p:panelGrid  columns="2" columnClasses="label,value" rendered="#{not empty ttBasicView.selectedDocument}">
                        <h:outputLabel for="name" value="Name: " />
                        <h:outputText id="name" value="#{ttBasicView.selectedDocument.name}" style="font-weight:bold" />

                        <h:outputLabel for="size" value="Size: " />
                        <h:outputText id="size" value="#{ttBasicView.selectedDocument.size}" style="font-weight:bold" />

                        <h:outputLabel for="type" value="Type " />
                        <h:outputText id="type" value="#{ttBasicView.selectedDocument.type}" style="font-weight:bold" />
                    </p:panelGrid>
                </p:outputPanel>
            </p:dialog>
        </h:form>
        
    </ui:define>

    <ui:define name="source">
        <p:tabView>
            <p:tab title="basic.xhtml">
                <pre name="code" class="brush:xml">
&lt;h:form id="form"&gt;
    &lt;p:treeTable value="\#{ttBasicView.root}" var="document"&gt;
        &lt;f:facet name="header"&gt;
            Document Viewer
        &lt;/f:facet&gt;
        &lt;p:column headerText="Name"&gt;
            &lt;h:outputText value="\#{document.name}" /&gt;
        &lt;/p:column&gt;
        &lt;p:column headerText="Size"&gt;
            &lt;h:outputText value="\#{document.size}" /&gt;
        &lt;/p:column&gt;
        &lt;p:column headerText="Type"&gt;
            &lt;h:outputText value="\#{document.type}" /&gt;
        &lt;/p:column&gt;
        &lt;p:column style="width:24px"&gt;
            &lt;p:commandLink update=":form:documentPanel" oncomplete="PF('documentDialog').show()" title="View Detail" styleClass="ui-icon ui-icon-search"&gt;
                &lt;f:setPropertyActionListener value="\#{document}" target="\#{ttBasicView.selectedDocument}" /&gt;
            &lt;/p:commandLink&gt;
        &lt;/p:column&gt;
    &lt;/p:treeTable&gt;

    &lt;p:dialog id="dialog" header="Document Detail" showEffect="fade" widgetVar="documentDialog" modal="true" resizable="false"&gt;
        &lt;p:outputPanel id="documentPanel"&gt;
            &lt;p:panelGrid  columns="2" columnClasses="label,value" rendered="\#{not empty ttBasicView.selectedDocument}"&gt;
                &lt;h:outputLabel for="name" value="Name: " /&gt;
                &lt;h:outputText id="name" value="\#{ttBasicView.selectedDocument.name}" style="font-weight:bold" /&gt;

                &lt;h:outputLabel for="size" value="Size: " /&gt;
                &lt;h:outputText id="size" value="\#{ttBasicView.selectedDocument.size}" style="font-weight:bold" /&gt;

                &lt;h:outputLabel for="type" value="Type " /&gt;
                &lt;h:outputText id="type" value="\#{ttBasicView.selectedDocument.type}" style="font-weight:bold" /&gt;
            &lt;/p:panelGrid&gt;
        &lt;/p:outputPanel&gt;
    &lt;/p:dialog&gt;
&lt;/h:form&gt;
                </pre>
            </p:tab>

            <p:tab title="BasicView.java">
                <pre name="code" class="brush:java">
package org.primefaces.showcase.view.data.treetable;

import java.io.Serializable;
import javax.annotation.PostConstruct;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ManagedProperty;
import javax.faces.bean.ViewScoped;
import org.primefaces.model.TreeNode;
import org.primefaces.showcase.domain.Document;
import org.primefaces.showcase.service.DocumentService;

@ManagedBean(name="ttBasicView")
@ViewScoped
public class BasicView implements Serializable {
    
    private TreeNode root;
    
    private Document selectedDocument;
        
    @ManagedProperty("\#{documentService}")
    private DocumentService service;
    
    @PostConstruct
    public void init() {
        root = service.createDocuments();
    }

    public TreeNode getRoot() {
        return root;
    }

    public void setService(DocumentService service) {
        this.service = service;
    }

    public Document getSelectedDocument() {
        return selectedDocument;
    }

    public void setSelectedDocument(Document selectedDocument) {
        this.selectedDocument = selectedDocument;
    }
}
                </pre>
            </p:tab>
            
            <p:tab title="DocumentService.java">
                <pre name="code" class="brush:java">
package org.primefaces.showcase.service;

import javax.faces.bean.ApplicationScoped;
import javax.faces.bean.ManagedBean;
import org.primefaces.model.DefaultTreeNode;
import org.primefaces.model.TreeNode;
import org.primefaces.showcase.domain.Document;

@ManagedBean(name = "documentService")
@ApplicationScoped
public class DocumentService {
    
    public TreeNode createDocuments() {
        TreeNode root = new DefaultTreeNode(new Document("Files", "-", "Folder"), null);
		
		TreeNode documents = new DefaultTreeNode(new Document("Documents", "-", "Folder"), root);
		TreeNode pictures = new DefaultTreeNode(new Document("Pictures", "-", "Folder"), root);
		TreeNode movies = new DefaultTreeNode(new Document("Movies", "-", "Folder"), root);
		
		TreeNode work = new DefaultTreeNode(new Document("Work", "-", "Folder"), documents);
		TreeNode primefaces = new DefaultTreeNode(new Document("PrimeFaces", "-", "Folder"), documents);
		
		//Documents
		TreeNode expenses = new DefaultTreeNode("document", new Document("Expenses.doc", "30 KB", "Word Document"), work);
		TreeNode resume = new DefaultTreeNode("document", new Document("Resume.doc", "10 KB", "Word Document"), work);
		TreeNode refdoc = new DefaultTreeNode("document", new Document("RefDoc.pages", "40 KB", "Pages Document"), primefaces);
		
		//Pictures
		TreeNode barca = new DefaultTreeNode("picture", new Document("barcelona.jpg", "30 KB", "JPEG Image"), pictures);
		TreeNode primelogo = new DefaultTreeNode("picture", new Document("logo.jpg", "45 KB", "JPEG Image"), pictures);
		TreeNode optimus = new DefaultTreeNode("picture", new Document("optimusprime.png", "96 KB", "PNG Image"), pictures);
		
		//Movies
		TreeNode pacino = new DefaultTreeNode(new Document("Al Pacino", "-", "Folder"), movies);
		TreeNode deniro = new DefaultTreeNode(new Document("Robert De Niro", "-", "Folder"), movies);
		
		TreeNode scarface = new DefaultTreeNode("mp3", new Document("Scarface", "15 GB", "Movie File"), pacino);
		TreeNode carlitosWay = new DefaultTreeNode("mp3", new Document("Carlitos' Way", "24 GB", "Movie File"), pacino);
		
		TreeNode goodfellas = new DefaultTreeNode("mp3", new Document("Goodfellas", "23 GB", "Movie File"), deniro);
		TreeNode untouchables = new DefaultTreeNode("mp3", new Document("Untouchables", "17 GB", "Movie File"), deniro);
        
        return root;
    }
}
                </pre>
            </p:tab>
            
            <p:tab title="Document.java">
                <pre name="code" class="brush:java">
package org.primefaces.showcase.domain;

import java.io.Serializable;

public class Document implements Serializable, Comparable&lt;Document&gt; {

	private String name;
	
	private String size;
	
	private String type;
	
	public Document(String name, String size, String type) {
		this.name = name;
		this.size = size;
		this.type = type;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getSize() {
		return size;
	}

	public void setSize(String size) {
		this.size = size;
	}

	public String getType() {
		return type;
	}

	public void setType(String type) {
		this.type = type;
	}

	//Eclipse Generated hashCode and equals
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((name == null) ? 0 : name.hashCode());
		result = prime * result + ((size == null) ? 0 : size.hashCode());
		result = prime * result + ((type == null) ? 0 : type.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Document other = (Document) obj;
		if (name == null) {
			if (other.name != null)
				return false;
		} else if (!name.equals(other.name))
			return false;
		if (size == null) {
			if (other.size != null)
				return false;
		} else if (!size.equals(other.size))
			return false;
		if (type == null) {
			if (other.type != null)
				return false;
		} else if (!type.equals(other.type))
			return false;
		return true;
	}

	@Override
	public String toString() {
		return name;
	}

    public int compareTo(Document document) {
        return this.getName().compareTo(document.getName());
    }
}  
                </pre>
            </p:tab>
            
            <p:tab title="Documentation" titleStyleClass="tab-doc docslide-486" />
        </p:tabView>

    </ui:define>

</ui:composition>