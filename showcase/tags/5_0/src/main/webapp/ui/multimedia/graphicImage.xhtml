<ui:composition xmlns="http://www.w3.org/1999/xhtml"
                xmlns:ui="http://java.sun.com/jsf/facelets"
                xmlns:h="http://java.sun.com/jsf/html"
                xmlns:f="http://java.sun.com/jsf/core"
                xmlns:p="http://primefaces.org/ui"
                template="/WEB-INF/template.xhtml">

    <ui:define name="title">
        GraphicImage
    </ui:define>

    <ui:define name="description">
        GraphicImage is capable of presenting images that are created programatically at runtime or images stored in a database.
    </ui:define>

    <ui:define name="implementation">
        
        <h3 style="margin-top:0">JFreeChart</h3>
        <p:graphicImage value="#{graphicImageView.chart}" />

        <h3>Barcode</h3>
        <p:graphicImage value="#{graphicImageView.barcode}" />

        <h3>GraphicText</h3>
        <p:graphicImage value="#{graphicImageView.graphicText}" />
            
    </ui:define>

    <ui:define name="source">
        <p:tabView>
            <p:tab title="graphicImage.xhtml">
                <pre name="code" class="brush:xml">
&lt;h3 style="margin-top:0"&gt;JFreeChart&lt;/h3&gt;
&lt;p:graphicImage value="\#{graphicImageView.chart}" /&gt;

&lt;h3&gt;Barcode&lt;/h3&gt;
&lt;p:graphicImage value="#{graphicImageView.barcode}" /&gt;

&lt;h3&gt;GraphicText&lt;/h3&gt;
&lt;p:graphicImage value="#{graphicImageView.graphicText}" /&gt;
                </pre>
            </p:tab>

            <p:tab title="GraphicImageView.java">
                <pre name="code" class="brush:java">
package org.primefaces.showcase.view.multimedia;

import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import javax.annotation.PostConstruct;
import javax.faces.bean.ManagedBean;
import javax.imageio.ImageIO;

import net.sourceforge.barbecue.BarcodeFactory;
import net.sourceforge.barbecue.BarcodeImageHandler;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.general.PieDataset;
import org.primefaces.model.DefaultStreamedContent;
import org.primefaces.model.StreamedContent;

@ManagedBean
public class GraphicImageView {

	private StreamedContent graphicText;
	
	private StreamedContent barcode;
	
	private StreamedContent chart;

    @PostConstruct
	public void init() {
        try {
            //Graphic Text
            BufferedImage bufferedImg = new BufferedImage(100, 25, BufferedImage.TYPE_INT_RGB);
            Graphics2D g2 = bufferedImg.createGraphics();
            g2.drawString("This is a text", 0, 10);
            ByteArrayOutputStream os = new ByteArrayOutputStream();
            ImageIO.write(bufferedImg, "png", os);
            graphicText = new DefaultStreamedContent(new ByteArrayInputStream(os.toByteArray()), "image/png"); 

            //Chart
            JFreeChart jfreechart = ChartFactory.createPieChart("Cities", createDataset(), true, true, false);
            File chartFile = new File("dynamichart");
            ChartUtilities.saveChartAsPNG(chartFile, jfreechart, 375, 300);
            chart = new DefaultStreamedContent(new FileInputStream(chartFile), "image/png");

            //Barcode
			File barcodeFile = new File("dynamicbarcode");
			BarcodeImageHandler.saveJPEG(BarcodeFactory.createCode128("PRIMEFACES"), barcodeFile);
			barcode = new DefaultStreamedContent(new FileInputStream(barcodeFile), "image/jpeg");
		} 
        catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public StreamedContent getBarcode() {
		return barcode;
	}

    public StreamedContent getGraphicText() {
        return graphicText;
    }
		
	public StreamedContent getChart() {
		return chart;
	}
	
	private PieDataset createDataset() {
		DefaultPieDataset dataset = new DefaultPieDataset();
		dataset.setValue("New York", new Double(45.0));
		dataset.setValue("London", new Double(15.0));
		dataset.setValue("Paris", new Double(25.2));
		dataset.setValue("Berlin", new Double(14.8));

		return dataset;
	}
}


                </pre>
            </p:tab>
            
            <p:tab title="Documentation" titleStyleClass="tab-doc docslide-227" />
        </p:tabView>

    </ui:define>

</ui:composition>